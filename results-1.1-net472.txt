Benchmarking on .NETFramework,Version=v4.7.2; 64-bit; Intel64 Family 6 Model 158 Stepping 10, GenuineIntel with quality constant 1000000000000maxIters: 200000
With arrays lengths approximating: 32, 128, 1024, 8192, 65536, 524288, 4194304


Sorting arrays of int with 32.0 elements by Int32Ordering (average over 200000 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type int: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.0MB; mergesort scratch needs an extra 0.0MB.
     PrimitiveArraySort: mean 12.692~0.021 ns/item; median 13.3; overhead: 36.5%
      ParallelQuickSort: mean 8.0748~0.021 ns/item; median 7.6; overhead: 45.7%
              QuickSort: mean 7.9001~0.02 ns/item; median 7.4; overhead: 46.1%
       TopDownMergeSort: mean 7.9091~0.02 ns/item; median 7.4; overhead: 46.2%
      BottomUpMergeSort: mean 9.5903~0.029 ns/item; median 9.1; overhead: 41.4%
     DualPivotQuickSort: mean 7.9944~0.021 ns/item; median 7.6; overhead: 46.3%
    AltTopDownMergeSort: mean 7.9961~0.025 ns/item; median 7.6; overhead: 45.5%

Sorting arrays of int with 32.0 elements by ComparableOrdering<int> (average over 200000 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type int: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.0MB; mergesort scratch needs an extra 0.0MB.
   IComparableArraySort: mean 19.118~0.022 ns/item; median 21.1; overhead: 27.8%
      ParallelQuickSort: mean 8.1044~0.021 ns/item; median 7.6; overhead: 48.8%
              QuickSort: mean 7.8938~0.02 ns/item; median 7.6; overhead: 49.2%
       TopDownMergeSort: mean 7.9215~0.02 ns/item; median 7.6; overhead: 49.6%
      BottomUpMergeSort: mean 9.477~0.032 ns/item; median 9.1; overhead: 43.9%
     DualPivotQuickSort: mean 8.0484~0.021 ns/item; median 7.6; overhead: 49.5%
    AltTopDownMergeSort: mean 7.9846~0.025 ns/item; median 7.6; overhead: 48.8%

Sorting arrays of uint with 32.0 elements by UInt32Ordering (average over 200000 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type uint: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.0MB; mergesort scratch needs an extra 0.0MB.
     PrimitiveArraySort: mean 12.647~0.02 ns/item; median 13.3; overhead: 35.2%
      ParallelQuickSort: mean 7.7642~0.02 ns/item; median 7.3; overhead: 47.6%
              QuickSort: mean 7.6172~0.02 ns/item; median 7.3; overhead: 47.9%
       TopDownMergeSort: mean 7.7247~0.021 ns/item; median 7.3; overhead: 47.9%
      BottomUpMergeSort: mean 9.266~0.055 ns/item; median 8.9; overhead: 42.5%
     DualPivotQuickSort: mean 7.7278~0.02 ns/item; median 7.3; overhead: 48.0%
    AltTopDownMergeSort: mean 7.789~0.025 ns/item; median 7.3; overhead: 47.4%

Sorting arrays of uint with 32.0 elements by ComparableOrdering<uint> (average over 200000 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type uint: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.0MB; mergesort scratch needs an extra 0.0MB.
   IComparableArraySort: mean 20.006~0.023 ns/item; median 22.1; overhead: 26.4%
      ParallelQuickSort: mean 8.762~0.022 ns/item; median 8.7; overhead: 45.6%
              QuickSort: mean 8.4594~0.02 ns/item; median 8.3; overhead: 46.4%
       TopDownMergeSort: mean 8.5804~0.021 ns/item; median 8.3; overhead: 46.4%
      BottomUpMergeSort: mean 9.7728~0.026 ns/item; median 9.6; overhead: 42.8%
     DualPivotQuickSort: mean 8.6416~0.021 ns/item; median 8.5; overhead: 46.5%
    AltTopDownMergeSort: mean 8.684~0.025 ns/item; median 8.5; overhead: 45.6%

Sorting arrays of ulong with 32.0 elements by UInt64Ordering (average over 200000 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type ulong: total size 8.0 bytes of which value 8.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.0MB; mergesort scratch needs an extra 0.0MB.
     PrimitiveArraySort: mean 12.424~0.021 ns/item; median 13.0; overhead: 37.1%
      ParallelQuickSort: mean 7.8909~0.021 ns/item; median 7.4; overhead: 48.9%
              QuickSort: mean 7.7598~0.02 ns/item; median 7.3; overhead: 49.0%
       TopDownMergeSort: mean 7.8673~0.021 ns/item; median 7.3; overhead: 49.2%
      BottomUpMergeSort: mean 10~0.033    ns/item; median 9.5; overhead: 43.0%
     DualPivotQuickSort: mean 7.7901~0.02 ns/item; median 7.3; overhead: 49.4%
    AltTopDownMergeSort: mean 7.9897~0.025 ns/item; median 7.6; overhead: 48.3%

Sorting arrays of ulong with 32.0 elements by ComparableOrdering<ulong> (average over 200000 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type ulong: total size 8.0 bytes of which value 8.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.0MB; mergesort scratch needs an extra 0.0MB.
   IComparableArraySort: mean 20.025~0.023 ns/item; median 22.1; overhead: 27.3%
      ParallelQuickSort: mean 8.4493~0.02 ns/item; median 8.3; overhead: 47.3%
              QuickSort: mean 8.4482~0.02 ns/item; median 8.3; overhead: 47.1%
       TopDownMergeSort: mean 8.561~0.084 ns/item; median 8.3; overhead: 49.9%
      BottomUpMergeSort: mean 10.371~0.031 ns/item; median 10.0; overhead: 43.8%
     DualPivotQuickSort: mean 8.2818~0.02 ns/item; median 7.9; overhead: 48.1%
    AltTopDownMergeSort: mean 8.4091~0.025 ns/item; median 8.1; overhead: 47.3%

Sorting arrays of double with 32.0 elements by DoubleOrdering (average over 200000 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type double: total size 8.0 bytes of which value 8.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.0MB; mergesort scratch needs an extra 0.0MB.
     PrimitiveArraySort: mean 14.958~0.021 ns/item; median 16.2; overhead: 34.7%
      ParallelQuickSort: mean 9.2837~0.021 ns/item; median 9.1; overhead: 45.9%
              QuickSort: mean 9.0993~0.02 ns/item; median 9.1; overhead: 46.2%
       TopDownMergeSort: mean 9.2135~0.021 ns/item; median 9.1; overhead: 46.0%
      BottomUpMergeSort: mean 10.744~0.032 ns/item; median 10.7; overhead: 42.2%
     DualPivotQuickSort: mean 9.1883~0.02 ns/item; median 9.1; overhead: 46.3%
    AltTopDownMergeSort: mean 9.3188~0.025 ns/item; median 9.4; overhead: 45.7%

Sorting arrays of double with 32.0 elements by ComparableOrdering<double> (average over 200000 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type double: total size 8.0 bytes of which value 8.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.0MB; mergesort scratch needs an extra 0.0MB.
   IComparableArraySort: mean 29.855~0.028 ns/item; median 33.9; overhead: 21.8%
      ParallelQuickSort: mean 20.241~0.026 ns/item; median 22.7; overhead: 27.2%
              QuickSort: mean 20.04~0.026 ns/item; median 22.7; overhead: 27.4%
       TopDownMergeSort: mean 20.17~0.026 ns/item; median 22.7; overhead: 27.4%
      BottomUpMergeSort: mean 19.103~0.027 ns/item; median 20.6; overhead: 30.4%
     DualPivotQuickSort: mean 20.291~0.026 ns/item; median 22.9; overhead: 27.4%
    AltTopDownMergeSort: mean 20.108~0.029 ns/item; median 22.7; overhead: 27.4%

Sorting arrays of float with 32.0 elements by FloatOrdering (average over 200000 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type float: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.0MB; mergesort scratch needs an extra 0.0MB.
     PrimitiveArraySort: mean 14.84~0.021 ns/item; median 15.8; overhead: 34.7%
      ParallelQuickSort: mean 9.1029~0.021 ns/item; median 9.1; overhead: 45.8%
              QuickSort: mean 8.8693~0.02 ns/item; median 8.9; overhead: 46.1%
       TopDownMergeSort: mean 9.1011~0.021 ns/item; median 9.1; overhead: 46.0%
      BottomUpMergeSort: mean 10.42~0.044 ns/item; median 10.5; overhead: 42.2%
     DualPivotQuickSort: mean 9.0265~0.02 ns/item; median 9.1; overhead: 46.4%
    AltTopDownMergeSort: mean 9.0952~0.025 ns/item; median 9.1; overhead: 45.4%

Sorting arrays of float with 32.0 elements by ComparableOrdering<float> (average over 200000 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type float: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.0MB; mergesort scratch needs an extra 0.0MB.
   IComparableArraySort: mean 28.906~0.027 ns/item; median 32.4; overhead: 22.0%
      ParallelQuickSort: mean 17.33~0.024 ns/item; median 19.2; overhead: 29.8%
              QuickSort: mean 16.968~0.024 ns/item; median 19.1; overhead: 30.2%
       TopDownMergeSort: mean 16.971~0.025 ns/item; median 19.1; overhead: 30.6%
      BottomUpMergeSort: mean 17.452~0.029 ns/item; median 18.7; overhead: 32.3%
     DualPivotQuickSort: mean 17.148~0.024 ns/item; median 19.2; overhead: 30.7%
    AltTopDownMergeSort: mean 16.952~0.028 ns/item; median 19.0; overhead: 30.5%

Sorting arrays of (int, int, int) with 32.0 elements by SmallTupleOrder (average over 200000 benchmarked arrays).
Insertion sorts below 34; faster quicksort median below 16000; no parallelism below 1000 items.
type (int, int, int): total size 16.0 bytes of which value 16.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.0MB; mergesort scratch needs an extra 0.0MB.
   IComparableArraySort: mean 27.247~0.026 ns/item; median 30.8; overhead: 44.2%
      ParallelQuickSort: mean 13.308~0.022 ns/item; median 14.6; overhead: 61.3%
              QuickSort: mean 13.079~0.022 ns/item; median 14.2; overhead: 62.2%
       TopDownMergeSort: mean 14.105~0.023 ns/item; median 15.2; overhead: 60.5%
      BottomUpMergeSort: mean 15.312~0.043 ns/item; median 15.8; overhead: 59.7%
     DualPivotQuickSort: mean 14.102~0.022 ns/item; median 15.2; overhead: 60.8%
    AltTopDownMergeSort: mean 14.734~0.023 ns/item; median 15.7; overhead: 59.9%

Sorting arrays of SampleClass with 32.0 elements by SampleClassOrder (average over 200000 benchmarked arrays).
Insertion sorts below 24; faster quicksort median below 10000; no parallelism below 1500 items.
type SampleClass: total size 32.0 bytes of which value 8.0 and heap size 24.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.0MB; mergesort scratch needs an extra 0.0MB.
   IComparableArraySort: mean 29.057~0.026 ns/item; median 32.0; overhead: 36.9%
      ParallelQuickSort: mean 21.985~0.03 ns/item; median 20.7; overhead: 45.4%
              QuickSort: mean 21.818~0.03 ns/item; median 20.7; overhead: 46.0%
       TopDownMergeSort: mean 23.675~0.031 ns/item; median 22.7; overhead: 44.2%
      BottomUpMergeSort: mean 28.376~0.037 ns/item; median 25.0; overhead: 41.8%
     DualPivotQuickSort: mean 22.54~0.029 ns/item; median 21.6; overhead: 45.1%
    AltTopDownMergeSort: mean 23.324~0.035 ns/item; median 21.7; overhead: 45.0%

Sorting arrays of (int, long, DateTime, string, Guid) with 32.0 elements by BigTupleOrder (average over 200000 benchmarked arrays).
Insertion sorts below 11; faster quicksort median below 16000; no parallelism below 1000 items.
type (int, long, DateTime, string, Guid): total size 48.5 bytes of which value 48.0 and heap size 0.5.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.0MB; mergesort scratch needs an extra 0.0MB.
   IComparableArraySort: mean 108.55~0.077 ns/item; median 120.8; overhead: 42.0%
      ParallelQuickSort: mean 49.254~0.034 ns/item; median 52.8; overhead: 62.2%
              QuickSort: mean 49.783~0.034 ns/item; median 53.5; overhead: 61.7%
       TopDownMergeSort: mean 54.694~0.042 ns/item; median 59.4; overhead: 58.7%
      BottomUpMergeSort: mean 61.495~0.055 ns/item; median 64.8; overhead: 56.9%
     DualPivotQuickSort: mean 49.626~0.034 ns/item; median 53.5; overhead: 61.6%
    AltTopDownMergeSort: mean 53.059~0.041 ns/item; median 57.3; overhead: 59.7%

Sorting arrays of string with 32.0 elements by StringOrder (average over 200000 benchmarked arrays).
Insertion sorts below 18; faster quicksort median below 2000; no parallelism below 800 items.
type string: total size 56.1 bytes of which value 8.0 and heap size 48.1.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.0MB; mergesort scratch needs an extra 0.0MB.
        StringArraySort: mean 41.31~0.033 ns/item; median 46.2; overhead: 38.6%
      ParallelQuickSort: mean 39.752~0.031 ns/item; median 43.0; overhead: 40.1%
              QuickSort: mean 40.029~0.032 ns/item; median 43.1; overhead: 40.2%
       TopDownMergeSort: mean 39.514~0.043 ns/item; median 41.9; overhead: 40.9%
      BottomUpMergeSort: mean 43.522~0.042 ns/item; median 44.6; overhead: 39.2%
     DualPivotQuickSort: mean 40.055~0.033 ns/item; median 43.1; overhead: 40.1%
    AltTopDownMergeSort: mean 38.684~0.032 ns/item; median 40.9; overhead: 41.4%


Sorting arrays of int with 128.0 elements by Int32Ordering (average over 200000 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type int: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.0MB; mergesort scratch needs an extra 0.0MB.
     PrimitiveArraySort: mean 19.067~0.017 ns/item; median 18.7; overhead: 14.3%
      ParallelQuickSort: mean 13.334~0.017 ns/item; median 13.2; overhead: 18.1%
              QuickSort: mean 13.329~0.017 ns/item; median 13.2; overhead: 18.1%
       TopDownMergeSort: mean 13.443~0.017 ns/item; median 13.3; overhead: 18.1%
      BottomUpMergeSort: mean 14.644~0.019 ns/item; median 14.3; overhead: 17.1%
     DualPivotQuickSort: mean 13.28~0.017 ns/item; median 13.2; overhead: 18.2%
    AltTopDownMergeSort: mean 13.512~0.017 ns/item; median 13.4; overhead: 17.9%

Sorting arrays of int with 128.0 elements by ComparableOrdering<int> (average over 200000 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type int: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.0MB; mergesort scratch needs an extra 0.0MB.
   IComparableArraySort: mean 28.976~0.017 ns/item; median 29.1; overhead: 12.1%
      ParallelQuickSort: mean 13.132~0.017 ns/item; median 13.1; overhead: 22.7%
              QuickSort: mean 13.133~0.016 ns/item; median 13.2; overhead: 22.6%
       TopDownMergeSort: mean 13.631~0.017 ns/item; median 13.6; overhead: 22.2%
      BottomUpMergeSort: mean 14.941~0.018 ns/item; median 14.6; overhead: 20.8%
     DualPivotQuickSort: mean 13.135~0.016 ns/item; median 13.1; overhead: 22.9%
    AltTopDownMergeSort: mean 13.58~0.017 ns/item; median 13.4; overhead: 22.3%

Sorting arrays of uint with 128.0 elements by UInt32Ordering (average over 200000 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type uint: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.0MB; mergesort scratch needs an extra 0.0MB.
     PrimitiveArraySort: mean 18.749~0.015 ns/item; median 18.5; overhead: 14.3%
      ParallelQuickSort: mean 12.802~0.016 ns/item; median 12.9; overhead: 18.8%
              QuickSort: mean 12.723~0.016 ns/item; median 12.9; overhead: 18.8%
       TopDownMergeSort: mean 13.107~0.017 ns/item; median 13.1; overhead: 18.7%
      BottomUpMergeSort: mean 14.6~0.058  ns/item; median 14.3; overhead: 17.2%
     DualPivotQuickSort: mean 12.911~0.016 ns/item; median 13.0; overhead: 18.7%
    AltTopDownMergeSort: mean 13.44~0.017 ns/item; median 13.4; overhead: 18.2%

Sorting arrays of uint with 128.0 elements by ComparableOrdering<uint> (average over 200000 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type uint: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.0MB; mergesort scratch needs an extra 0.0MB.
   IComparableArraySort: mean 30.163~0.017 ns/item; median 30.3; overhead: 11.6%
      ParallelQuickSort: mean 14.367~0.017 ns/item; median 14.4; overhead: 21.0%
              QuickSort: mean 14.291~0.017 ns/item; median 14.3; overhead: 21.1%
       TopDownMergeSort: mean 14.528~0.017 ns/item; median 14.5; overhead: 20.9%
      BottomUpMergeSort: mean 15.35~0.018 ns/item; median 15.0; overhead: 20.3%
     DualPivotQuickSort: mean 14.314~0.017 ns/item; median 14.3; overhead: 21.3%
    AltTopDownMergeSort: mean 14.49~0.017 ns/item; median 14.5; overhead: 20.9%

Sorting arrays of ulong with 128.0 elements by UInt64Ordering (average over 200000 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type ulong: total size 8.0 bytes of which value 8.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.0MB; mergesort scratch needs an extra 0.0MB.
     PrimitiveArraySort: mean 18.663~0.016 ns/item; median 18.2; overhead: 16.1%
      ParallelQuickSort: mean 13.101~0.017 ns/item; median 13.0; overhead: 20.8%
              QuickSort: mean 12.924~0.017 ns/item; median 12.9; overhead: 20.9%
       TopDownMergeSort: mean 13.421~0.017 ns/item; median 13.3; overhead: 20.5%
      BottomUpMergeSort: mean 15.224~0.019 ns/item; median 14.8; overhead: 18.9%
     DualPivotQuickSort: mean 13.033~0.017 ns/item; median 13.0; overhead: 20.9%
    AltTopDownMergeSort: mean 13.6~0.018  ns/item; median 13.4; overhead: 20.4%

Sorting arrays of ulong with 128.0 elements by ComparableOrdering<ulong> (average over 200000 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type ulong: total size 8.0 bytes of which value 8.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.0MB; mergesort scratch needs an extra 0.0MB.
   IComparableArraySort: mean 30.291~0.017 ns/item; median 30.5; overhead: 12.2%
      ParallelQuickSort: mean 14.202~0.017 ns/item; median 14.2; overhead: 22.4%
              QuickSort: mean 14.15~0.016 ns/item; median 14.2; overhead: 22.3%
       TopDownMergeSort: mean 14.41~0.017 ns/item; median 14.4; overhead: 22.5%
      BottomUpMergeSort: mean 15.756~0.02 ns/item; median 15.2; overhead: 21.9%
     DualPivotQuickSort: mean 14.151~0.017 ns/item; median 14.2; overhead: 22.5%
    AltTopDownMergeSort: mean 14.256~0.017 ns/item; median 14.2; overhead: 22.5%

Sorting arrays of double with 128.0 elements by DoubleOrdering (average over 200000 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type double: total size 8.0 bytes of which value 8.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.0MB; mergesort scratch needs an extra 0.0MB.
     PrimitiveArraySort: mean 22.229~0.017 ns/item; median 21.8; overhead: 17.3%
      ParallelQuickSort: mean 15.3~0.017  ns/item; median 15.3; overhead: 22.3%
              QuickSort: mean 15.229~0.016 ns/item; median 15.3; overhead: 22.3%
       TopDownMergeSort: mean 15.647~0.017 ns/item; median 15.7; overhead: 22.0%
      BottomUpMergeSort: mean 16.974~0.019 ns/item; median 16.8; overhead: 21.0%
     DualPivotQuickSort: mean 15.262~0.016 ns/item; median 15.3; overhead: 22.4%
    AltTopDownMergeSort: mean 15.778~0.017 ns/item; median 15.8; overhead: 21.9%

Sorting arrays of double with 128.0 elements by ComparableOrdering<double> (average over 200000 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type double: total size 8.0 bytes of which value 8.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.0MB; mergesort scratch needs an extra 0.0MB.
   IComparableArraySort: mean 47.492~0.021 ns/item; median 48.5; overhead: 9.6%
      ParallelQuickSort: mean 32.367~0.02 ns/item; median 32.9; overhead: 13.3%
              QuickSort: mean 32.37~0.02  ns/item; median 32.9; overhead: 13.3%
       TopDownMergeSort: mean 33.017~0.021 ns/item; median 33.4; overhead: 13.0%
      BottomUpMergeSort: mean 30.241~0.021 ns/item; median 30.2; overhead: 14.5%
     DualPivotQuickSort: mean 32.415~0.02 ns/item; median 32.9; overhead: 13.4%
    AltTopDownMergeSort: mean 31.51~0.02  ns/item; median 32.3; overhead: 13.3%

Sorting arrays of float with 128.0 elements by FloatOrdering (average over 200000 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type float: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.0MB; mergesort scratch needs an extra 0.0MB.
     PrimitiveArraySort: mean 21.92~0.017 ns/item; median 21.4; overhead: 16.9%
      ParallelQuickSort: mean 15.133~0.017 ns/item; median 15.2; overhead: 21.5%
              QuickSort: mean 15.072~0.016 ns/item; median 15.2; overhead: 21.5%
       TopDownMergeSort: mean 15.47~0.018 ns/item; median 15.5; overhead: 21.1%
      BottomUpMergeSort: mean 16.598~0.018 ns/item; median 16.5; overhead: 20.1%
     DualPivotQuickSort: mean 15.129~0.017 ns/item; median 15.2; overhead: 21.6%
    AltTopDownMergeSort: mean 15.521~0.017 ns/item; median 15.6; overhead: 21.0%

Sorting arrays of float with 128.0 elements by ComparableOrdering<float> (average over 200000 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type float: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.0MB; mergesort scratch needs an extra 0.0MB.
   IComparableArraySort: mean 45.565~0.099 ns/item; median 46.1; overhead: 9.7%
      ParallelQuickSort: mean 28.217~0.019 ns/item; median 28.8; overhead: 14.2%
              QuickSort: mean 28.673~0.02 ns/item; median 29.2; overhead: 14.0%
       TopDownMergeSort: mean 28.618~0.019 ns/item; median 29.0; overhead: 14.0%
      BottomUpMergeSort: mean 26.973~0.019 ns/item; median 27.0; overhead: 15.3%
     DualPivotQuickSort: mean 28.034~0.019 ns/item; median 28.6; overhead: 14.4%
    AltTopDownMergeSort: mean 27.595~0.019 ns/item; median 28.4; overhead: 14.1%

Sorting arrays of (int, int, int) with 128.0 elements by SmallTupleOrder (average over 200000 benchmarked arrays).
Insertion sorts below 34; faster quicksort median below 16000; no parallelism below 1000 items.
type (int, int, int): total size 16.0 bytes of which value 16.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.0MB; mergesort scratch needs an extra 0.0MB.
   IComparableArraySort: mean 41.875~0.02 ns/item; median 42.6; overhead: 32.2%
      ParallelQuickSort: mean 21.635~0.018 ns/item; median 21.8; overhead: 47.7%
              QuickSort: mean 21.479~0.017 ns/item; median 21.7; overhead: 47.8%
       TopDownMergeSort: mean 22.428~0.019 ns/item; median 22.5; overhead: 46.9%
      BottomUpMergeSort: mean 23.81~0.024 ns/item; median 23.6; overhead: 46.1%
     DualPivotQuickSort: mean 22.289~0.018 ns/item; median 22.5; overhead: 46.8%
    AltTopDownMergeSort: mean 23.336~0.019 ns/item; median 23.5; overhead: 45.9%

Sorting arrays of SampleClass with 128.0 elements by SampleClassOrder (average over 200000 benchmarked arrays).
Insertion sorts below 24; faster quicksort median below 10000; no parallelism below 1500 items.
type SampleClass: total size 32.0 bytes of which value 8.0 and heap size 24.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.1MB; mergesort scratch needs an extra 0.0MB.
   IComparableArraySort: mean 43.205~0.02 ns/item; median 43.4; overhead: 17.3%
      ParallelQuickSort: mean 27.564~0.024 ns/item; median 26.0; overhead: 25.6%
              QuickSort: mean 27.525~0.024 ns/item; median 26.0; overhead: 25.7%
       TopDownMergeSort: mean 30.709~0.025 ns/item; median 29.8; overhead: 24.1%
      BottomUpMergeSort: mean 32.772~0.03 ns/item; median 30.0; overhead: 23.9%
     DualPivotQuickSort: mean 28.518~0.024 ns/item; median 27.0; overhead: 25.3%
    AltTopDownMergeSort: mean 29.743~0.024 ns/item; median 28.2; overhead: 24.5%

Sorting arrays of (int, long, DateTime, string, Guid) with 128.0 elements by BigTupleOrder (average over 200000 benchmarked arrays).
Insertion sorts below 11; faster quicksort median below 16000; no parallelism below 1000 items.
type (int, long, DateTime, string, Guid): total size 48.0 bytes of which value 48.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.1MB; mergesort scratch needs an extra 0.0MB.
   IComparableArraySort: mean 164.02~0.061 ns/item; median 166.5; overhead: 32.6%
      ParallelQuickSort: mean 68.982~0.087 ns/item; median 68.8; overhead: 54.2%
              QuickSort: mean 69.254~0.028 ns/item; median 69.1; overhead: 54.1%
       TopDownMergeSort: mean 80.453~0.034 ns/item; median 78.8; overhead: 49.9%
      BottomUpMergeSort: mean 85.721~0.039 ns/item; median 85.3; overhead: 48.9%
     DualPivotQuickSort: mean 69.028~0.027 ns/item; median 69.0; overhead: 54.2%
    AltTopDownMergeSort: mean 77.23~0.03  ns/item; median 76.7; overhead: 50.9%

Sorting arrays of string with 128.0 elements by StringOrder (average over 200000 benchmarked arrays).
Insertion sorts below 18; faster quicksort median below 2000; no parallelism below 800 items.
type string: total size 56.0 bytes of which value 8.0 and heap size 48.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.1MB; mergesort scratch needs an extra 0.0MB.
        StringArraySort: mean 66.241~0.026 ns/item; median 67.4; overhead: 25.3%
      ParallelQuickSort: mean 61.541~0.024 ns/item; median 62.1; overhead: 26.8%
              QuickSort: mean 61.928~0.062 ns/item; median 62.5; overhead: 26.9%
       TopDownMergeSort: mean 59.113~0.025 ns/item; median 59.3; overhead: 28.2%
      BottomUpMergeSort: mean 60.991~0.024 ns/item; median 59.9; overhead: 27.7%
     DualPivotQuickSort: mean 62.78~0.024 ns/item; median 63.3; overhead: 26.7%
    AltTopDownMergeSort: mean 57.767~0.024 ns/item; median 57.6; overhead: 28.4%


Sorting arrays of int with 1023.3 elements by Int32Ordering (average over 171096 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type int: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.1MB; mergesort scratch needs an extra 0.0MB.
     PrimitiveArraySort: mean 30.275~0.025 ns/item; median 27.3; overhead: 6.3%
      ParallelQuickSort: mean 23.072~0.021 ns/item; median 21.2; overhead: 7.9%
              QuickSort: mean 23.017~0.019 ns/item; median 21.2; overhead: 7.9%
       TopDownMergeSort: mean 24.4~0.02   ns/item; median 22.7; overhead: 7.5%
      BottomUpMergeSort: mean 24.848~0.028 ns/item; median 23.1; overhead: 7.6%
     DualPivotQuickSort: mean 23.495~0.02 ns/item; median 21.7; overhead: 7.7%
    AltTopDownMergeSort: mean 24.482~0.02 ns/item; median 23.1; overhead: 7.4%

Sorting arrays of int with 1023.3 elements by ComparableOrdering<int> (average over 171096 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type int: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.1MB; mergesort scratch needs an extra 0.0MB.
   IComparableArraySort: mean 47.997~0.034 ns/item; median 43.7; overhead: 6.1%
      ParallelQuickSort: mean 22.889~0.02 ns/item; median 21.2; overhead: 11.8%
              QuickSort: mean 23.171~0.021 ns/item; median 21.5; overhead: 11.7%
       TopDownMergeSort: mean 24.417~0.024 ns/item; median 22.7; overhead: 11.2%
      BottomUpMergeSort: mean 25.156~0.024 ns/item; median 23.6; overhead: 11.1%
     DualPivotQuickSort: mean 24.021~0.02 ns/item; median 22.4; overhead: 11.2%
    AltTopDownMergeSort: mean 24.743~0.021 ns/item; median 23.1; overhead: 11.0%

Sorting arrays of uint with 1023.3 elements by UInt32Ordering (average over 171096 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type uint: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.1MB; mergesort scratch needs an extra 0.0MB.
     PrimitiveArraySort: mean 29.891~0.025 ns/item; median 26.9; overhead: 6.4%
      ParallelQuickSort: mean 22.81~0.019 ns/item; median 21.1; overhead: 8.0%
              QuickSort: mean 22.867~0.028 ns/item; median 21.1; overhead: 8.0%
       TopDownMergeSort: mean 24.351~0.02 ns/item; median 22.7; overhead: 7.5%
      BottomUpMergeSort: mean 24.937~0.022 ns/item; median 23.4; overhead: 7.5%
     DualPivotQuickSort: mean 23.122~0.019 ns/item; median 21.4; overhead: 7.8%
    AltTopDownMergeSort: mean 24.708~0.021 ns/item; median 23.2; overhead: 7.4%

Sorting arrays of uint with 1023.3 elements by ComparableOrdering<uint> (average over 171096 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type uint: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.1MB; mergesort scratch needs an extra 0.0MB.
   IComparableArraySort: mean 49.503~0.036 ns/item; median 45.0; overhead: 5.9%
      ParallelQuickSort: mean 24.526~0.03 ns/item; median 22.4; overhead: 11.3%
              QuickSort: mean 24.356~0.021 ns/item; median 22.3; overhead: 11.3%
       TopDownMergeSort: mean 25.733~0.022 ns/item; median 23.8; overhead: 10.6%
      BottomUpMergeSort: mean 25.831~0.023 ns/item; median 23.9; overhead: 10.8%
     DualPivotQuickSort: mean 24.982~0.02 ns/item; median 23.2; overhead: 10.8%
    AltTopDownMergeSort: mean 25.642~0.021 ns/item; median 24.0; overhead: 10.7%

Sorting arrays of ulong with 1023.3 elements by UInt64Ordering (average over 171096 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type ulong: total size 8.0 bytes of which value 8.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.1MB; mergesort scratch needs an extra 0.0MB.
     PrimitiveArraySort: mean 29.782~0.03 ns/item; median 26.9; overhead: 7.9%
      ParallelQuickSort: mean 22.728~0.019 ns/item; median 21.0; overhead: 9.8%
              QuickSort: mean 22.731~0.02 ns/item; median 21.0; overhead: 9.8%
       TopDownMergeSort: mean 24.462~0.021 ns/item; median 22.7; overhead: 9.2%
      BottomUpMergeSort: mean 25.48~0.024 ns/item; median 23.8; overhead: 9.1%
     DualPivotQuickSort: mean 23.017~0.021 ns/item; median 21.3; overhead: 9.7%
    AltTopDownMergeSort: mean 24.958~0.021 ns/item; median 23.3; overhead: 9.0%

Sorting arrays of ulong with 1023.3 elements by ComparableOrdering<ulong> (average over 171096 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type ulong: total size 8.0 bytes of which value 8.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.1MB; mergesort scratch needs an extra 0.0MB.
   IComparableArraySort: mean 50.358~0.059 ns/item; median 45.8; overhead: 6.4%
      ParallelQuickSort: mean 23.749~0.019 ns/item; median 21.9; overhead: 12.5%
              QuickSort: mean 23.821~0.021 ns/item; median 22.0; overhead: 12.5%
       TopDownMergeSort: mean 25.603~0.022 ns/item; median 23.7; overhead: 12.1%
      BottomUpMergeSort: mean 26.093~0.024 ns/item; median 24.1; overhead: 12.0%
     DualPivotQuickSort: mean 25.058~0.024 ns/item; median 23.3; overhead: 11.8%
    AltTopDownMergeSort: mean 25.783~0.021 ns/item; median 24.2; overhead: 12.0%

Sorting arrays of double with 1023.3 elements by DoubleOrdering (average over 171096 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type double: total size 8.0 bytes of which value 8.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.1MB; mergesort scratch needs an extra 0.0MB.
     PrimitiveArraySort: mean 35.115~0.029 ns/item; median 31.6; overhead: 9.9%
      ParallelQuickSort: mean 26.589~0.021 ns/item; median 24.5; overhead: 12.4%
              QuickSort: mean 26.602~0.022 ns/item; median 24.5; overhead: 12.4%
       TopDownMergeSort: mean 28.279~0.022 ns/item; median 26.4; overhead: 11.7%
      BottomUpMergeSort: mean 29.127~0.029 ns/item; median 27.1; overhead: 11.6%
     DualPivotQuickSort: mean 26.919~0.023 ns/item; median 24.8; overhead: 12.2%
    AltTopDownMergeSort: mean 29.678~0.022 ns/item; median 27.9; overhead: 11.6%

Sorting arrays of double with 1023.3 elements by ComparableOrdering<double> (average over 171096 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type double: total size 8.0 bytes of which value 8.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.1MB; mergesort scratch needs an extra 0.0MB.
   IComparableArraySort: mean 81.017~0.05 ns/item; median 74.5; overhead: 5.2%
      ParallelQuickSort: mean 53.575~0.043 ns/item; median 48.7; overhead: 7.7%
              QuickSort: mean 53.571~0.038 ns/item; median 48.7; overhead: 7.7%
       TopDownMergeSort: mean 55.351~0.038 ns/item; median 47.3; overhead: 7.4%
      BottomUpMergeSort: mean 51.429~0.04 ns/item; median 45.4; overhead: 8.0%
     DualPivotQuickSort: mean 53.753~0.039 ns/item; median 48.8; overhead: 7.7%
    AltTopDownMergeSort: mean 51.471~0.038 ns/item; median 44.5; overhead: 8.1%

Sorting arrays of float with 1023.3 elements by FloatOrdering (average over 171096 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type float: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.1MB; mergesort scratch needs an extra 0.0MB.
     PrimitiveArraySort: mean 34.444~0.038 ns/item; median 30.9; overhead: 9.3%
      ParallelQuickSort: mean 26.396~0.021 ns/item; median 24.3; overhead: 11.4%
              QuickSort: mean 26.356~0.021 ns/item; median 24.3; overhead: 11.4%
       TopDownMergeSort: mean 27.976~0.021 ns/item; median 26.1; overhead: 10.8%
      BottomUpMergeSort: mean 28.705~0.023 ns/item; median 26.8; overhead: 10.8%
     DualPivotQuickSort: mean 26.739~0.022 ns/item; median 24.7; overhead: 11.3%
    AltTopDownMergeSort: mean 28.311~0.03 ns/item; median 26.7; overhead: 10.7%

Sorting arrays of float with 1023.3 elements by ComparableOrdering<float> (average over 171096 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type float: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.1MB; mergesort scratch needs an extra 0.0MB.
   IComparableArraySort: mean 76.192~0.049 ns/item; median 69.7; overhead: 5.1%
      ParallelQuickSort: mean 47.398~0.034 ns/item; median 43.3; overhead: 7.9%
              QuickSort: mean 47.628~0.049 ns/item; median 43.4; overhead: 7.9%
       TopDownMergeSort: mean 49.932~0.034 ns/item; median 44.2; overhead: 7.5%
      BottomUpMergeSort: mean 46.614~0.032 ns/item; median 41.6; overhead: 8.0%
     DualPivotQuickSort: mean 48.123~0.034 ns/item; median 44.0; overhead: 7.8%
    AltTopDownMergeSort: mean 46.661~0.036 ns/item; median 41.5; overhead: 8.1%

Sorting arrays of (int, int, int) with 1023.3 elements by SmallTupleOrder (average over 171096 benchmarked arrays).
Insertion sorts below 34; faster quicksort median below 16000; no parallelism below 1000 items.
type (int, int, int): total size 16.0 bytes of which value 16.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.3MB; mergesort scratch needs an extra 0.0MB.
   IComparableArraySort: mean 71.997~0.046 ns/item; median 66.0; overhead: 23.7%
      ParallelQuickSort: mean 37.979~0.028 ns/item; median 35.1; overhead: 36.9%
              QuickSort: mean 38.174~0.028 ns/item; median 35.1; overhead: 36.5%
       TopDownMergeSort: mean 39.146~0.029 ns/item; median 37.0; overhead: 35.5%
      BottomUpMergeSort: mean 39.867~0.034 ns/item; median 35.5; overhead: 35.4%
     DualPivotQuickSort: mean 38.911~0.028 ns/item; median 36.0; overhead: 35.6%
    AltTopDownMergeSort: mean 39.772~0.031 ns/item; median 36.4; overhead: 35.4%

Sorting arrays of SampleClass with 1023.3 elements by SampleClassOrder (average over 171096 benchmarked arrays).
Insertion sorts below 24; faster quicksort median below 10000; no parallelism below 1500 items.
type SampleClass: total size 32.0 bytes of which value 8.0 and heap size 24.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.5MB; mergesort scratch needs an extra 0.0MB.
   IComparableArraySort: mean 70.916~0.048 ns/item; median 64.4; overhead: 9.2%
      ParallelQuickSort: mean 41.359~0.039 ns/item; median 36.6; overhead: 15.3%
              QuickSort: mean 41.221~0.038 ns/item; median 36.5; overhead: 15.3%
       TopDownMergeSort: mean 47.996~0.041 ns/item; median 41.7; overhead: 13.6%
      BottomUpMergeSort: mean 48.788~0.048 ns/item; median 43.2; overhead: 13.5%
     DualPivotQuickSort: mean 43.531~0.038 ns/item; median 38.8; overhead: 14.9%
    AltTopDownMergeSort: mean 47.034~0.04 ns/item; median 41.4; overhead: 13.8%

Sorting arrays of (int, long, DateTime, string, Guid) with 1023.3 elements by BigTupleOrder (average over 171096 benchmarked arrays).
Insertion sorts below 11; faster quicksort median below 16000; no parallelism below 1000 items.
type (int, long, DateTime, string, Guid): total size 48.0 bytes of which value 48.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.8MB; mergesort scratch needs an extra 0.0MB.
   IComparableArraySort: mean 271~0.18    ns/item; median 247.0; overhead: 25.0%
      ParallelQuickSort: mean 105.08~0.083 ns/item; median 94.1; overhead: 47.3%
              QuickSort: mean 105.75~0.081 ns/item; median 94.1; overhead: 46.8%
       TopDownMergeSort: mean 129.99~0.097 ns/item; median 121.1; overhead: 41.5%
      BottomUpMergeSort: mean 136.63~0.11 ns/item; median 120.7; overhead: 40.3%
     DualPivotQuickSort: mean 109.52~0.078 ns/item; median 98.8; overhead: 45.5%
    AltTopDownMergeSort: mean 126.03~0.095 ns/item; median 115.2; overhead: 42.1%

Sorting arrays of string with 1023.3 elements by StringOrder (average over 171096 benchmarked arrays).
Insertion sorts below 18; faster quicksort median below 2000; no parallelism below 800 items.
type string: total size 56.0 bytes of which value 8.0 and heap size 48.0.  
Per-sort working set on average 0.1MB (max upto twice that), overall benchmark ~0.9MB; mergesort scratch needs an extra 0.0MB.
        StringArraySort: mean 116.65~0.069 ns/item; median 107.6; overhead: 16.4%
      ParallelQuickSort: mean 99.89~0.091 ns/item; median 99.7; overhead: 21.0%
              QuickSort: mean 108.3~0.065 ns/item; median 99.8; overhead: 17.7%
       TopDownMergeSort: mean 103.56~0.062 ns/item; median 94.1; overhead: 18.4%
      BottomUpMergeSort: mean 102.65~0.065 ns/item; median 94.6; overhead: 18.5%
     DualPivotQuickSort: mean 109.6~0.068 ns/item; median 100.6; overhead: 17.7%
    AltTopDownMergeSort: mean 100.16~0.061 ns/item; median 92.4; overhead: 18.8%


Sorting arrays of int with 8228.3 elements by Int32Ordering (average over 19513 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type int: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.5MB; mergesort scratch needs an extra 0.0MB.
     PrimitiveArraySort: mean 42.02~0.14  ns/item; median 35.2; overhead: 4.6%
      ParallelQuickSort: mean 19.66~0.14  ns/item; median 11.9; overhead: 14.3%
              QuickSort: mean 33.657~0.1  ns/item; median 28.6; overhead: 5.5%
       TopDownMergeSort: mean 36.427~0.11 ns/item; median 31.3; overhead: 5.1%
      BottomUpMergeSort: mean 36.575~0.11 ns/item; median 30.7; overhead: 5.1%
     DualPivotQuickSort: mean 34.418~0.1  ns/item; median 29.4; overhead: 5.4%
    AltTopDownMergeSort: mean 36.26~0.11  ns/item; median 30.9; overhead: 5.1%

Sorting arrays of int with 8228.3 elements by ComparableOrdering<int> (average over 19513 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type int: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.5MB; mergesort scratch needs an extra 0.0MB.
   IComparableArraySort: mean 68.08~0.22  ns/item; median 57.4; overhead: 4.5%
      ParallelQuickSort: mean 19.71~0.14  ns/item; median 12.1; overhead: 19.8%
              QuickSort: mean 33.449~0.1  ns/item; median 28.5; overhead: 8.6%
       TopDownMergeSort: mean 35.938~0.1  ns/item; median 31.1; overhead: 8.1%
      BottomUpMergeSort: mean 36.781~0.11 ns/item; median 30.6; overhead: 7.9%
     DualPivotQuickSort: mean 35.718~0.11 ns/item; median 30.7; overhead: 8.1%
    AltTopDownMergeSort: mean 36.322~0.11 ns/item; median 31.1; overhead: 8.0%

Sorting arrays of uint with 8228.3 elements by UInt32Ordering (average over 19513 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type uint: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.5MB; mergesort scratch needs an extra 0.0MB.
     PrimitiveArraySort: mean 41.41~0.14  ns/item; median 34.6; overhead: 4.6%
      ParallelQuickSort: mean 19.8~0.14   ns/item; median 12.0; overhead: 14.4%
              QuickSort: mean 33.49~0.11  ns/item; median 28.5; overhead: 5.5%
       TopDownMergeSort: mean 35.999~0.11 ns/item; median 31.0; overhead: 5.2%
      BottomUpMergeSort: mean 36.69~0.12  ns/item; median 30.4; overhead: 5.1%
     DualPivotQuickSort: mean 34.116~0.1  ns/item; median 29.2; overhead: 5.4%
    AltTopDownMergeSort: mean 36.734~0.12 ns/item; median 31.4; overhead: 5.1%

Sorting arrays of uint with 8228.3 elements by ComparableOrdering<uint> (average over 19513 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type uint: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.5MB; mergesort scratch needs an extra 0.0MB.
   IComparableArraySort: mean 69.83~0.22  ns/item; median 58.8; overhead: 4.4%
      ParallelQuickSort: mean 20.43~0.15  ns/item; median 12.1; overhead: 19.9%
              QuickSort: mean 34.79~0.11  ns/item; median 29.5; overhead: 8.4%
       TopDownMergeSort: mean 37.48~0.13  ns/item; median 32.0; overhead: 7.8%
      BottomUpMergeSort: mean 37.57~0.13  ns/item; median 31.4; overhead: 7.8%
     DualPivotQuickSort: mean 36.918~0.11 ns/item; median 31.7; overhead: 7.8%
    AltTopDownMergeSort: mean 37.43~0.13  ns/item; median 31.7; overhead: 7.8%

Sorting arrays of ulong with 8228.3 elements by UInt64Ordering (average over 19513 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type ulong: total size 8.0 bytes of which value 8.0 and heap size 0.0.  
Per-sort working set on average 0.1MB (max upto twice that), overall benchmark ~1.0MB; mergesort scratch needs an extra 0.1MB.
     PrimitiveArraySort: mean 41.42~0.14  ns/item; median 34.7; overhead: 5.9%
      ParallelQuickSort: mean 19.69~0.15  ns/item; median 11.9; overhead: 17.4%
              QuickSort: mean 33.28~0.1   ns/item; median 28.4; overhead: 7.0%
       TopDownMergeSort: mean 36.57~0.12  ns/item; median 31.3; overhead: 6.5%
      BottomUpMergeSort: mean 37.34~0.12  ns/item; median 31.0; overhead: 6.4%
     DualPivotQuickSort: mean 33.666~0.11 ns/item; median 28.7; overhead: 7.0%
    AltTopDownMergeSort: mean 36.871~0.11 ns/item; median 31.4; overhead: 6.5%

Sorting arrays of ulong with 8228.3 elements by ComparableOrdering<ulong> (average over 19513 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type ulong: total size 8.0 bytes of which value 8.0 and heap size 0.0.  
Per-sort working set on average 0.1MB (max upto twice that), overall benchmark ~1.0MB; mergesort scratch needs an extra 0.1MB.
   IComparableArraySort: mean 70.9~0.23   ns/item; median 59.6; overhead: 4.8%
      ParallelQuickSort: mean 20.4~0.15   ns/item; median 12.3; overhead: 21.3%
              QuickSort: mean 34.4~0.11   ns/item; median 29.2; overhead: 9.3%
       TopDownMergeSort: mean 37.394~0.12 ns/item; median 32.2; overhead: 8.9%
      BottomUpMergeSort: mean 38~0.13     ns/item; median 31.7; overhead: 8.9%
     DualPivotQuickSort: mean 37.096~0.11 ns/item; median 31.8; overhead: 8.6%
    AltTopDownMergeSort: mean 37.486~0.12 ns/item; median 31.8; overhead: 9.0%

Sorting arrays of double with 8228.3 elements by DoubleOrdering (average over 19513 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type double: total size 8.0 bytes of which value 8.0 and heap size 0.0.  
Per-sort working set on average 0.1MB (max upto twice that), overall benchmark ~1.0MB; mergesort scratch needs an extra 0.1MB.
     PrimitiveArraySort: mean 48.19~0.16  ns/item; median 40.3; overhead: 7.7%
      ParallelQuickSort: mean 22.43~0.16  ns/item; median 13.5; overhead: 21.5%
              QuickSort: mean 38.695~0.12 ns/item; median 32.9; overhead: 9.2%
       TopDownMergeSort: mean 42.106~0.13 ns/item; median 36.2; overhead: 8.5%
      BottomUpMergeSort: mean 42.934~0.14 ns/item; median 36.0; overhead: 8.5%
     DualPivotQuickSort: mean 39.296~0.12 ns/item; median 33.5; overhead: 9.0%
    AltTopDownMergeSort: mean 42.47~0.14  ns/item; median 36.1; overhead: 8.5%

Sorting arrays of double with 8228.3 elements by ComparableOrdering<double> (average over 19513 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type double: total size 8.0 bytes of which value 8.0 and heap size 0.0.  
Per-sort working set on average 0.1MB (max upto twice that), overall benchmark ~1.0MB; mergesort scratch needs an extra 0.1MB.
   IComparableArraySort: mean 116.34~0.36 ns/item; median 98.5; overhead: 3.9%
      ParallelQuickSort: mean 39.97~0.33  ns/item; median 21.6; overhead: 16.6%
              QuickSort: mean 74.65~0.24  ns/item; median 62.5; overhead: 5.9%
       TopDownMergeSort: mean 78.02~0.25  ns/item; median 64.3; overhead: 5.7%
      BottomUpMergeSort: mean 72.95~0.24  ns/item; median 63.2; overhead: 6.1%
     DualPivotQuickSort: mean 75.01~0.24  ns/item; median 62.9; overhead: 5.9%
    AltTopDownMergeSort: mean 75.059~0.23 ns/item; median 61.8; overhead: 5.7%

Sorting arrays of float with 8228.3 elements by FloatOrdering (average over 19513 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type float: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.5MB; mergesort scratch needs an extra 0.0MB.
     PrimitiveArraySort: mean 47.28~0.16  ns/item; median 39.5; overhead: 7.1%
      ParallelQuickSort: mean 23.03~0.17  ns/item; median 13.7; overhead: 19.8%
              QuickSort: mean 38.397~0.12 ns/item; median 32.7; overhead: 8.4%
       TopDownMergeSort: mean 41.73~0.14  ns/item; median 35.8; overhead: 7.8%
      BottomUpMergeSort: mean 42.347~0.13 ns/item; median 35.6; overhead: 7.7%
     DualPivotQuickSort: mean 39.172~0.12 ns/item; median 33.5; overhead: 8.2%
    AltTopDownMergeSort: mean 41.85~0.12  ns/item; median 35.8; overhead: 7.7%

Sorting arrays of float with 8228.3 elements by ComparableOrdering<float> (average over 19513 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type float: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.0MB (max upto twice that), overall benchmark ~0.5MB; mergesort scratch needs an extra 0.0MB.
   IComparableArraySort: mean 108.84~0.34 ns/item; median 92.0; overhead: 3.7%
      ParallelQuickSort: mean 36.45~0.29  ns/item; median 20.3; overhead: 16.1%
              QuickSort: mean 67.53~0.21  ns/item; median 56.9; overhead: 5.9%
       TopDownMergeSort: mean 71.082~0.22 ns/item; median 59.2; overhead: 5.6%
      BottomUpMergeSort: mean 66.82~0.21  ns/item; median 57.8; overhead: 6.0%
     DualPivotQuickSort: mean 68.42~0.21  ns/item; median 57.9; overhead: 5.8%
    AltTopDownMergeSort: mean 68.635~0.21 ns/item; median 56.9; overhead: 5.7%

Sorting arrays of (int, int, int) with 8228.3 elements by SmallTupleOrder (average over 19513 benchmarked arrays).
Insertion sorts below 34; faster quicksort median below 16000; no parallelism below 1000 items.
type (int, int, int): total size 16.0 bytes of which value 16.0 and heap size 0.0.  
Per-sort working set on average 0.1MB (max upto twice that), overall benchmark ~2.0MB; mergesort scratch needs an extra 0.1MB.
   IComparableArraySort: mean 101.65~0.32 ns/item; median 85.9; overhead: 18.9%
      ParallelQuickSort: mean 29.25~0.22  ns/item; median 17.0; overhead: 55.6%
              QuickSort: mean 52.828~0.17 ns/item; median 44.7; overhead: 30.9%
       TopDownMergeSort: mean 55.92~0.18  ns/item; median 47.0; overhead: 29.6%
      BottomUpMergeSort: mean 57.11~0.23  ns/item; median 48.6; overhead: 29.5%
     DualPivotQuickSort: mean 54.181~0.16 ns/item; median 46.0; overhead: 30.3%
    AltTopDownMergeSort: mean 56.92~0.18  ns/item; median 48.1; overhead: 29.3%

Sorting arrays of SampleClass with 8228.3 elements by SampleClassOrder (average over 19513 benchmarked arrays).
Insertion sorts below 24; faster quicksort median below 10000; no parallelism below 1500 items.
type SampleClass: total size 32.0 bytes of which value 8.0 and heap size 24.0.  
Per-sort working set on average 0.3MB (max upto twice that), overall benchmark ~4.0MB; mergesort scratch needs an extra 0.1MB.
   IComparableArraySort: mean 102.11~0.32 ns/item; median 86.1; overhead: 7.5%
      ParallelQuickSort: mean 34.8~0.29   ns/item; median 19.1; overhead: 28.6%
              QuickSort: mean 59.05~0.21  ns/item; median 49.0; overhead: 12.8%
       TopDownMergeSort: mean 69.34~0.25  ns/item; median 59.0; overhead: 11.2%
      BottomUpMergeSort: mean 70.6~0.31   ns/item; median 60.2; overhead: 11.0%
     DualPivotQuickSort: mean 61.99~0.2   ns/item; median 52.0; overhead: 12.3%
    AltTopDownMergeSort: mean 67.87~0.24  ns/item; median 57.9; overhead: 11.4%

Sorting arrays of (int, long, DateTime, string, Guid) with 8228.3 elements by BigTupleOrder (average over 19513 benchmarked arrays).
Insertion sorts below 11; faster quicksort median below 16000; no parallelism below 1000 items.
type (int, long, DateTime, string, Guid): total size 48.0 bytes of which value 48.0 and heap size 0.0.  
Per-sort working set on average 0.4MB (max upto twice that), overall benchmark ~6.0MB; mergesort scratch needs an extra 0.4MB.
   IComparableArraySort: mean 384.8~1.2   ns/item; median 324.5; overhead: 20.6%
      ParallelQuickSort: mean 72.49~0.67  ns/item; median 35.7; overhead: 70.6%
              QuickSort: mean 143.3~0.51  ns/item; median 118.4; overhead: 41.5%
       TopDownMergeSort: mean 184.8~0.63  ns/item; median 149.7; overhead: 35.2%
      BottomUpMergeSort: mean 191.7~0.72  ns/item; median 161.6; overhead: 34.7%
     DualPivotQuickSort: mean 154.1~0.51  ns/item; median 129.5; overhead: 39.3%
    AltTopDownMergeSort: mean 180.5~0.61  ns/item; median 149.2; overhead: 35.7%

Sorting arrays of string with 8228.3 elements by StringOrder (average over 19513 benchmarked arrays).
Insertion sorts below 18; faster quicksort median below 2000; no parallelism below 800 items.
type string: total size 56.0 bytes of which value 8.0 and heap size 48.0.  
Per-sort working set on average 0.4MB (max upto twice that), overall benchmark ~7.0MB; mergesort scratch needs an extra 0.1MB.
        StringArraySort: mean 174.92~0.51 ns/item; median 149.8; overhead: 14.1%
      ParallelQuickSort: mean 72.23~0.66  ns/item; median 36.2; overhead: 41.3%
              QuickSort: mean 162.73~0.49 ns/item; median 138.5; overhead: 15.2%
       TopDownMergeSort: mean 154.56~0.47 ns/item; median 134.9; overhead: 16.0%
      BottomUpMergeSort: mean 156.13~0.46 ns/item; median 134.1; overhead: 15.7%
     DualPivotQuickSort: mean 162.33~0.5  ns/item; median 138.0; overhead: 15.4%
    AltTopDownMergeSort: mean 150.04~0.44 ns/item; median 128.1; overhead: 16.3%


Sorting arrays of int with 64104.9 elements by Int32Ordering (average over 2207 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type int: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.3MB (max upto twice that), overall benchmark ~4.0MB; mergesort scratch needs an extra 0.3MB.
     PrimitiveArraySort: mean 53.02~0.65  ns/item; median 43.1; overhead: 4.0%
      ParallelQuickSort: mean 14.2~0.48   ns/item; median 8.3; overhead: 18.4%
              QuickSort: mean 43.69~0.5   ns/item; median 36.0; overhead: 4.8%
       TopDownMergeSort: mean 48.64~0.54  ns/item; median 40.3; overhead: 4.4%
      BottomUpMergeSort: mean 48.52~0.55  ns/item; median 40.7; overhead: 4.4%
     DualPivotQuickSort: mean 45.07~0.5   ns/item; median 37.2; overhead: 4.6%
    AltTopDownMergeSort: mean 48.91~0.55  ns/item; median 40.6; overhead: 4.4%

Sorting arrays of int with 64104.9 elements by ComparableOrdering<int> (average over 2207 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type int: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.3MB (max upto twice that), overall benchmark ~4.0MB; mergesort scratch needs an extra 0.3MB.
   IComparableArraySort: mean 87.03~1     ns/item; median 70.9; overhead: 3.8%
      ParallelQuickSort: mean 14.4~0.48   ns/item; median 8.4; overhead: 25.7%
              QuickSort: mean 44.22~0.5   ns/item; median 36.6; overhead: 7.2%
       TopDownMergeSort: mean 48.6~0.54   ns/item; median 40.2; overhead: 6.7%
      BottomUpMergeSort: mean 48.87~0.55  ns/item; median 41.2; overhead: 6.7%
     DualPivotQuickSort: mean 47.55~0.52  ns/item; median 39.3; overhead: 6.7%
    AltTopDownMergeSort: mean 49.18~0.55  ns/item; median 40.6; overhead: 6.6%

Sorting arrays of uint with 64104.9 elements by UInt32Ordering (average over 2207 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type uint: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.3MB (max upto twice that), overall benchmark ~4.0MB; mergesort scratch needs an extra 0.3MB.
     PrimitiveArraySort: mean 52.16~0.63  ns/item; median 42.4; overhead: 4.1%
      ParallelQuickSort: mean 14.2~0.48   ns/item; median 8.2; overhead: 18.7%
              QuickSort: mean 43.75~0.49  ns/item; median 36.0; overhead: 4.8%
       TopDownMergeSort: mean 48.64~0.54  ns/item; median 40.2; overhead: 4.4%
      BottomUpMergeSort: mean 48.7~0.56   ns/item; median 41.1; overhead: 4.5%
     DualPivotQuickSort: mean 44.73~0.5   ns/item; median 36.9; overhead: 4.7%
    AltTopDownMergeSort: mean 49.18~0.55  ns/item; median 40.7; overhead: 4.5%

Sorting arrays of uint with 64104.9 elements by ComparableOrdering<uint> (average over 2207 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type uint: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.3MB (max upto twice that), overall benchmark ~4.0MB; mergesort scratch needs an extra 0.3MB.
   IComparableArraySort: mean 89.42~1.1   ns/item; median 72.9; overhead: 3.8%
      ParallelQuickSort: mean 14.6~0.5    ns/item; median 8.4; overhead: 25.9%
              QuickSort: mean 44.9~0.52   ns/item; median 36.8; overhead: 7.2%
       TopDownMergeSort: mean 49.94~0.56  ns/item; median 41.4; overhead: 6.6%
      BottomUpMergeSort: mean 49.62~0.57  ns/item; median 41.3; overhead: 6.7%
     DualPivotQuickSort: mean 48.67~0.53  ns/item; median 40.3; overhead: 6.6%
    AltTopDownMergeSort: mean 49.93~0.57  ns/item; median 41.6; overhead: 6.6%

Sorting arrays of ulong with 64104.9 elements by UInt64Ordering (average over 2207 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type ulong: total size 8.0 bytes of which value 8.0 and heap size 0.0.  
Per-sort working set on average 0.5MB (max upto twice that), overall benchmark ~8.0MB; mergesort scratch needs an extra 0.5MB.
     PrimitiveArraySort: mean 52.27~0.64  ns/item; median 42.5; overhead: 5.5%
      ParallelQuickSort: mean 14.2~0.48   ns/item; median 8.2; overhead: 23.8%
              QuickSort: mean 43.31~0.49  ns/item; median 35.6; overhead: 6.4%
       TopDownMergeSort: mean 49.84~0.59  ns/item; median 40.9; overhead: 5.9%
      BottomUpMergeSort: mean 50.03~0.61  ns/item; median 41.9; overhead: 5.9%
     DualPivotQuickSort: mean 43.93~0.5   ns/item; median 36.1; overhead: 6.4%
    AltTopDownMergeSort: mean 50.56~0.6   ns/item; median 41.5; overhead: 5.8%

Sorting arrays of ulong with 64104.9 elements by ComparableOrdering<ulong> (average over 2207 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type ulong: total size 8.0 bytes of which value 8.0 and heap size 0.0.  
Per-sort working set on average 0.5MB (max upto twice that), overall benchmark ~8.0MB; mergesort scratch needs an extra 0.5MB.
   IComparableArraySort: mean 90.39~1.1   ns/item; median 73.7; overhead: 4.3%
      ParallelQuickSort: mean 14.6~0.5    ns/item; median 8.4; overhead: 29.1%
              QuickSort: mean 44.51~0.51  ns/item; median 36.5; overhead: 8.4%
       TopDownMergeSort: mean 50.9~0.6    ns/item; median 41.7; overhead: 7.6%
      BottomUpMergeSort: mean 50.56~0.62  ns/item; median 41.9; overhead: 7.7%
     DualPivotQuickSort: mean 48.81~0.55  ns/item; median 40.3; overhead: 7.7%
    AltTopDownMergeSort: mean 51.12~0.62  ns/item; median 41.9; overhead: 7.7%

Sorting arrays of double with 64104.9 elements by DoubleOrdering (average over 2207 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type double: total size 8.0 bytes of which value 8.0 and heap size 0.0.  
Per-sort working set on average 0.5MB (max upto twice that), overall benchmark ~8.0MB; mergesort scratch needs an extra 0.5MB.
     PrimitiveArraySort: mean 60.54~0.75  ns/item; median 49.2; overhead: 7.0%
      ParallelQuickSort: mean 16.2~0.55   ns/item; median 9.5; overhead: 28.6%
              QuickSort: mean 50.3~0.57   ns/item; median 41.4; overhead: 8.1%
       TopDownMergeSort: mean 57.27~0.66  ns/item; median 47.2; overhead: 7.4%
      BottomUpMergeSort: mean 57.57~0.69  ns/item; median 48.0; overhead: 7.4%
     DualPivotQuickSort: mean 51.34~0.58  ns/item; median 42.3; overhead: 8.0%
    AltTopDownMergeSort: mean 57.77~0.68  ns/item; median 47.5; overhead: 7.3%

Sorting arrays of double with 64104.9 elements by ComparableOrdering<double> (average over 2207 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type double: total size 8.0 bytes of which value 8.0 and heap size 0.0.  
Per-sort working set on average 0.5MB (max upto twice that), overall benchmark ~8.0MB; mergesort scratch needs an extra 0.5MB.
   IComparableArraySort: mean 150.1~1.8   ns/item; median 122.9; overhead: 3.4%
      ParallelQuickSort: mean 27.8~1.1    ns/item; median 15.9; overhead: 21.6%
              QuickSort: mean 94.3~1.1    ns/item; median 76.7; overhead: 5.3%
       TopDownMergeSort: mean 100.9~1.2   ns/item; median 85.7; overhead: 5.0%
      BottomUpMergeSort: mean 95.72~1.2   ns/item; median 76.5; overhead: 5.3%
     DualPivotQuickSort: mean 94.87~1.1   ns/item; median 77.1; overhead: 5.3%
    AltTopDownMergeSort: mean 96.62~1.2   ns/item; median 85.6; overhead: 5.3%

Sorting arrays of float with 64104.9 elements by FloatOrdering (average over 2207 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type float: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.3MB (max upto twice that), overall benchmark ~4.0MB; mergesort scratch needs an extra 0.3MB.
     PrimitiveArraySort: mean 59.46~0.75  ns/item; median 48.2; overhead: 6.1%
      ParallelQuickSort: mean 16~0.55     ns/item; median 9.4; overhead: 25.6%
              QuickSort: mean 50.02~0.57  ns/item; median 41.2; overhead: 7.1%
       TopDownMergeSort: mean 56.05~0.62  ns/item; median 46.5; overhead: 6.4%
      BottomUpMergeSort: mean 56.39~0.64  ns/item; median 47.4; overhead: 6.4%
     DualPivotQuickSort: mean 51.27~0.58  ns/item; median 42.3; overhead: 6.9%
    AltTopDownMergeSort: mean 56.42~0.63  ns/item; median 46.8; overhead: 6.4%

Sorting arrays of float with 64104.9 elements by ComparableOrdering<float> (average over 2207 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type float: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 0.3MB (max upto twice that), overall benchmark ~4.0MB; mergesort scratch needs an extra 0.3MB.
   IComparableArraySort: mean 140.2~1.6   ns/item; median 114.7; overhead: 3.2%
      ParallelQuickSort: mean 25.8~0.97   ns/item; median 15.0; overhead: 20.3%
              QuickSort: mean 85.7~1      ns/item; median 69.8; overhead: 5.1%
       TopDownMergeSort: mean 92.21~1.1   ns/item; median 78.5; overhead: 4.7%
      BottomUpMergeSort: mean 87.87~1     ns/item; median 71.0; overhead: 5.0%
     DualPivotQuickSort: mean 87.87~1     ns/item; median 71.8; overhead: 4.9%
    AltTopDownMergeSort: mean 88.89~1     ns/item; median 78.4; overhead: 5.0%

Sorting arrays of (int, int, int) with 64104.9 elements by SmallTupleOrder (average over 2207 benchmarked arrays).
Insertion sorts below 34; faster quicksort median below 16000; no parallelism below 1000 items.
type (int, int, int): total size 16.0 bytes of which value 16.0 and heap size 0.0.  
Per-sort working set on average 1.0MB (max upto twice that), overall benchmark ~16.0MB; mergesort scratch needs an extra 1.0MB.
   IComparableArraySort: mean 130.2~1.5   ns/item; median 106.5; overhead: 16.4%
      ParallelQuickSort: mean 21~0.74     ns/item; median 12.3; overhead: 63.3%
              QuickSort: mean 68.05~0.81  ns/item; median 55.7; overhead: 27.3%
       TopDownMergeSort: mean 76.15~1.2   ns/item; median 61.5; overhead: 25.4%
      BottomUpMergeSort: mean 77.08~1.1   ns/item; median 61.2; overhead: 25.2%
     DualPivotQuickSort: mean 70.38~0.82  ns/item; median 57.7; overhead: 26.6%
    AltTopDownMergeSort: mean 75.61~0.93  ns/item; median 61.9; overhead: 25.4%

Sorting arrays of SampleClass with 64104.9 elements by SampleClassOrder (average over 2207 benchmarked arrays).
Insertion sorts below 24; faster quicksort median below 10000; no parallelism below 1500 items.
type SampleClass: total size 32.0 bytes of which value 8.0 and heap size 24.0.  
Per-sort working set on average 2.0MB (max upto twice that), overall benchmark ~32.0MB; mergesort scratch needs an extra 0.5MB.
   IComparableArraySort: mean 137.4~1.5   ns/item; median 115.8; overhead: 7.1%
      ParallelQuickSort: mean 24.2~0.91   ns/item; median 13.9; overhead: 38.9%
              QuickSort: mean 78.65~0.89  ns/item; median 65.8; overhead: 11.8%
       TopDownMergeSort: mean 93.71~1     ns/item; median 77.3; overhead: 10.1%
      BottomUpMergeSort: mean 95.2~1      ns/item; median 79.5; overhead: 10.0%
     DualPivotQuickSort: mean 83.57~0.91  ns/item; median 70.2; overhead: 11.2%
    AltTopDownMergeSort: mean 92.06~1     ns/item; median 76.2; overhead: 10.3%

Sorting arrays of (int, long, DateTime, string, Guid) with 64104.9 elements by BigTupleOrder (average over 2207 benchmarked arrays).
Insertion sorts below 11; faster quicksort median below 16000; no parallelism below 1000 items.
type (int, long, DateTime, string, Guid): total size 48.0 bytes of which value 48.0 and heap size 0.0.  
Per-sort working set on average 3.0MB (max upto twice that), overall benchmark ~48.0MB; mergesort scratch needs an extra 3.0MB.
   IComparableArraySort: mean 494.9~5.8   ns/item; median 406.5; overhead: 17.7%
      ParallelQuickSort: mean 50.7~2.1    ns/item; median 29.9; overhead: 74.8%
              QuickSort: mean 181.4~2.3   ns/item; median 148.0; overhead: 37.0%
       TopDownMergeSort: mean 238.5~2.9   ns/item; median 198.5; overhead: 31.0%
      BottomUpMergeSort: mean 248.8~3.2   ns/item; median 202.1; overhead: 29.9%
     DualPivotQuickSort: mean 200.9~2.3   ns/item; median 165.9; overhead: 34.4%
    AltTopDownMergeSort: mean 233.2~2.8   ns/item; median 193.5; overhead: 31.4%

Sorting arrays of string with 64104.9 elements by StringOrder (average over 2207 benchmarked arrays).
Insertion sorts below 18; faster quicksort median below 2000; no parallelism below 800 items.
type string: total size 56.0 bytes of which value 8.0 and heap size 48.0.  
Per-sort working set on average 3.5MB (max upto twice that), overall benchmark ~56.0MB; mergesort scratch needs an extra 0.5MB.
        StringArraySort: mean 237.8~2.6   ns/item; median 198.6; overhead: 12.6%
      ParallelQuickSort: mean 55~2.2      ns/item; median 33.9; overhead: 46.2%
              QuickSort: mean 216.1~2.4   ns/item; median 179.2; overhead: 13.9%
       TopDownMergeSort: mean 215.3~2.6   ns/item; median 176.0; overhead: 13.8%
      BottomUpMergeSort: mean 217~2.6     ns/item; median 180.4; overhead: 13.7%
     DualPivotQuickSort: mean 215.1~2.4   ns/item; median 178.4; overhead: 13.9%
    AltTopDownMergeSort: mean 209.2~2.6   ns/item; median 174.5; overhead: 14.2%


Sorting arrays of int with 511394.4 elements by Int32Ordering (average over 254 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type int: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 2.0MB (max upto twice that), overall benchmark ~32.0MB; mergesort scratch needs an extra 2.0MB.
     PrimitiveArraySort: mean 64~2.7      ns/item; median 50.7; overhead: 3.6%
      ParallelQuickSort: mean 12~0.98     ns/item; median 8.4; overhead: 18.7%
              QuickSort: mean 54~2.2      ns/item; median 43.4; overhead: 4.2%
       TopDownMergeSort: mean 60.8~2.4    ns/item; median 49.0; overhead: 3.8%
      BottomUpMergeSort: mean 60.7~2.4    ns/item; median 47.9; overhead: 3.7%
     DualPivotQuickSort: mean 55.7~2.2    ns/item; median 44.4; overhead: 4.1%
    AltTopDownMergeSort: mean 60.9~2.4    ns/item; median 48.6; overhead: 3.8%

Sorting arrays of int with 511394.4 elements by ComparableOrdering<int> (average over 254 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type int: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 2.0MB (max upto twice that), overall benchmark ~32.0MB; mergesort scratch needs an extra 2.0MB.
   IComparableArraySort: mean 106~4.3     ns/item; median 84.7; overhead: 3.4%
      ParallelQuickSort: mean 12.2~0.99   ns/item; median 8.5; overhead: 25.8%
              QuickSort: mean 54.1~2.2    ns/item; median 43.4; overhead: 6.3%
       TopDownMergeSort: mean 60.8~2.4    ns/item; median 48.7; overhead: 5.7%
      BottomUpMergeSort: mean 61~2.4      ns/item; median 48.0; overhead: 5.6%
     DualPivotQuickSort: mean 59.2~2.3    ns/item; median 47.4; overhead: 5.8%
    AltTopDownMergeSort: mean 61.1~2.4    ns/item; median 49.1; overhead: 5.7%

Sorting arrays of uint with 511394.4 elements by UInt32Ordering (average over 254 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type uint: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 2.0MB (max upto twice that), overall benchmark ~32.0MB; mergesort scratch needs an extra 2.0MB.
     PrimitiveArraySort: mean 63.1~2.6    ns/item; median 49.8; overhead: 3.6%
      ParallelQuickSort: mean 11.9~0.98   ns/item; median 8.3; overhead: 18.8%
              QuickSort: mean 53.8~2.2    ns/item; median 43.0; overhead: 4.2%
       TopDownMergeSort: mean 60.8~2.4    ns/item; median 48.8; overhead: 3.8%
      BottomUpMergeSort: mean 61~2.4      ns/item; median 48.0; overhead: 3.7%
     DualPivotQuickSort: mean 55.4~2.2    ns/item; median 44.1; overhead: 4.1%
    AltTopDownMergeSort: mean 61.1~2.4    ns/item; median 49.0; overhead: 3.8%

Sorting arrays of uint with 511394.4 elements by ComparableOrdering<uint> (average over 254 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type uint: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 2.0MB (max upto twice that), overall benchmark ~32.0MB; mergesort scratch needs an extra 2.0MB.
   IComparableArraySort: mean 109~4.4     ns/item; median 86.9; overhead: 3.3%
      ParallelQuickSort: mean 12.2~1      ns/item; median 8.4; overhead: 25.9%
              QuickSort: mean 55.1~2.3    ns/item; median 44.0; overhead: 6.3%
       TopDownMergeSort: mean 62.1~2.5    ns/item; median 50.1; overhead: 5.6%
      BottomUpMergeSort: mean 61.4~2.5    ns/item; median 48.7; overhead: 5.7%
     DualPivotQuickSort: mean 60.6~2.4    ns/item; median 48.6; overhead: 5.7%
    AltTopDownMergeSort: mean 62.1~2.5    ns/item; median 49.5; overhead: 5.6%

Sorting arrays of ulong with 511394.4 elements by UInt64Ordering (average over 254 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type ulong: total size 8.0 bytes of which value 8.0 and heap size 0.0.  
Per-sort working set on average 4.0MB (max upto twice that), overall benchmark ~64.0MB; mergesort scratch needs an extra 4.0MB.
     PrimitiveArraySort: mean 63.2~2.6    ns/item; median 49.8; overhead: 5.0%
      ParallelQuickSort: mean 12~0.99     ns/item; median 8.4; overhead: 24.0%
              QuickSort: mean 53.7~2.2    ns/item; median 42.9; overhead: 5.8%
       TopDownMergeSort: mean 61.7~2.4    ns/item; median 49.6; overhead: 5.1%
      BottomUpMergeSort: mean 64.1~2.9    ns/item; median 49.8; overhead: 4.9%
     DualPivotQuickSort: mean 54.2~2.2    ns/item; median 43.2; overhead: 5.7%
    AltTopDownMergeSort: mean 62.1~2.4    ns/item; median 49.9; overhead: 5.0%

Sorting arrays of ulong with 511394.4 elements by ComparableOrdering<ulong> (average over 254 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type ulong: total size 8.0 bytes of which value 8.0 and heap size 0.0.  
Per-sort working set on average 4.0MB (max upto twice that), overall benchmark ~64.0MB; mergesort scratch needs an extra 4.0MB.
   IComparableArraySort: mean 110~4.5     ns/item; median 87.8; overhead: 3.8%
      ParallelQuickSort: mean 12.4~1      ns/item; median 8.7; overhead: 28.9%
              QuickSort: mean 54.8~2.2    ns/item; median 43.9; overhead: 7.4%
       TopDownMergeSort: mean 62.7~2.4    ns/item; median 50.8; overhead: 6.5%
      BottomUpMergeSort: mean 64.5~3      ns/item; median 50.1; overhead: 6.4%
     DualPivotQuickSort: mean 60.5~2.4    ns/item; median 48.2; overhead: 6.7%
    AltTopDownMergeSort: mean 62.8~2.4    ns/item; median 50.4; overhead: 6.5%

Sorting arrays of double with 511394.4 elements by DoubleOrdering (average over 254 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type double: total size 8.0 bytes of which value 8.0 and heap size 0.0.  
Per-sort working set on average 4.0MB (max upto twice that), overall benchmark ~64.0MB; mergesort scratch needs an extra 4.0MB.
     PrimitiveArraySort: mean 72.9~3.1    ns/item; median 57.8; overhead: 6.2%
      ParallelQuickSort: mean 13.9~1.1    ns/item; median 9.9; overhead: 28.3%
              QuickSort: mean 62.1~2.5    ns/item; median 49.8; overhead: 7.1%
       TopDownMergeSort: mean 71~2.7      ns/item; median 57.2; overhead: 6.3%
      BottomUpMergeSort: mean 73.6~3.3    ns/item; median 57.1; overhead: 6.1%
     DualPivotQuickSort: mean 63.4~2.5    ns/item; median 50.6; overhead: 7.0%
    AltTopDownMergeSort: mean 71.5~2.9    ns/item; median 57.3; overhead: 6.3%

Sorting arrays of double with 511394.4 elements by ComparableOrdering<double> (average over 254 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type double: total size 8.0 bytes of which value 8.0 and heap size 0.0.  
Per-sort working set on average 4.0MB (max upto twice that), overall benchmark ~64.0MB; mergesort scratch needs an extra 4.0MB.
   IComparableArraySort: mean 184~7.4     ns/item; median 146.8; overhead: 2.9%
      ParallelQuickSort: mean 23.8~2      ns/item; median 16.6; overhead: 21.2%
              QuickSort: mean 114~4.8     ns/item; median 90.2; overhead: 4.7%
       TopDownMergeSort: mean 122~5       ns/item; median 101.5; overhead: 4.3%
      BottomUpMergeSort: mean 119~5.1     ns/item; median 94.8; overhead: 4.5%
     DualPivotQuickSort: mean 115~4.8     ns/item; median 90.7; overhead: 4.7%
    AltTopDownMergeSort: mean 120~4.9     ns/item; median 93.9; overhead: 4.4%

Sorting arrays of float with 511394.4 elements by FloatOrdering (average over 254 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type float: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 2.0MB (max upto twice that), overall benchmark ~32.0MB; mergesort scratch needs an extra 2.0MB.
     PrimitiveArraySort: mean 71.5~3      ns/item; median 56.6; overhead: 5.4%
      ParallelQuickSort: mean 13.5~1.1    ns/item; median 9.4; overhead: 25.6%
              QuickSort: mean 61.6~2.5    ns/item; median 49.3; overhead: 6.1%
       TopDownMergeSort: mean 70.2~2.8    ns/item; median 56.4; overhead: 5.4%
      BottomUpMergeSort: mean 70.4~2.8    ns/item; median 55.7; overhead: 5.4%
     DualPivotQuickSort: mean 63.4~2.5    ns/item; median 50.4; overhead: 6.0%
    AltTopDownMergeSort: mean 70.3~2.7    ns/item; median 56.4; overhead: 5.4%

Sorting arrays of float with 511394.4 elements by ComparableOrdering<float> (average over 254 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type float: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 2.0MB (max upto twice that), overall benchmark ~32.0MB; mergesort scratch needs an extra 2.0MB.
   IComparableArraySort: mean 172~6.9     ns/item; median 137.0; overhead: 2.8%
      ParallelQuickSort: mean 22.2~1.9    ns/item; median 15.4; overhead: 20.4%
              QuickSort: mean 104~4.3     ns/item; median 82.7; overhead: 4.5%
       TopDownMergeSort: mean 113~4.6     ns/item; median 93.4; overhead: 4.2%
      BottomUpMergeSort: mean 108~4.2     ns/item; median 87.6; overhead: 4.4%
     DualPivotQuickSort: mean 107~4.4     ns/item; median 84.9; overhead: 4.4%
    AltTopDownMergeSort: mean 112~4.6     ns/item; median 86.9; overhead: 4.2%

Sorting arrays of (int, int, int) with 511394.4 elements by SmallTupleOrder (average over 254 benchmarked arrays).
Insertion sorts below 34; faster quicksort median below 16000; no parallelism below 1000 items.
type (int, int, int): total size 16.0 bytes of which value 16.0 and heap size 0.0.  
Per-sort working set on average 8.0MB (max upto twice that), overall benchmark ~128.0MB; mergesort scratch needs an extra 8.0MB.
   IComparableArraySort: mean 159~6.5     ns/item; median 126.6; overhead: 14.3%
      ParallelQuickSort: mean 18.4~1.6    ns/item; median 12.8; overhead: 62.2%
              QuickSort: mean 83.3~3.4    ns/item; median 66.4; overhead: 24.1%
       TopDownMergeSort: mean 93.1~3.6    ns/item; median 75.6; overhead: 21.9%
      BottomUpMergeSort: mean 99.2~4.7    ns/item; median 77.6; overhead: 21.3%
     DualPivotQuickSort: mean 86.4~3.5    ns/item; median 68.7; overhead: 23.4%
    AltTopDownMergeSort: mean 93.6~3.7    ns/item; median 75.0; overhead: 21.7%

Sorting arrays of SampleClass with 511394.4 elements by SampleClassOrder (average over 254 benchmarked arrays).
Insertion sorts below 24; faster quicksort median below 10000; no parallelism below 1500 items.
type SampleClass: total size 32.0 bytes of which value 8.0 and heap size 24.0.  
Per-sort working set on average 16.0MB (max upto twice that), overall benchmark ~256.0MB; mergesort scratch needs an extra 4.0MB.
   IComparableArraySort: mean 183~6.2     ns/item; median 150.4; overhead: 11.5%
      ParallelQuickSort: mean 24.4~2.6    ns/item; median 17.2; overhead: 51.3%
              QuickSort: mean 105~3.6     ns/item; median 87.3; overhead: 17.7%
       TopDownMergeSort: mean 127~4.5     ns/item; median 104.0; overhead: 15.6%
      BottomUpMergeSort: mean 139.3~4.4   ns/item; median 120.4; overhead: 13.7%
     DualPivotQuickSort: mean 113~3.8     ns/item; median 93.5; overhead: 16.9%
    AltTopDownMergeSort: mean 123~4.2     ns/item; median 101.8; overhead: 15.9%

Sorting arrays of (int, long, DateTime, string, Guid) with 511394.4 elements by BigTupleOrder (average over 254 benchmarked arrays).
Insertion sorts below 11; faster quicksort median below 16000; no parallelism below 1000 items.
type (int, long, DateTime, string, Guid): total size 48.0 bytes of which value 48.0 and heap size 0.0.  
Per-sort working set on average 24.0MB (max upto twice that), overall benchmark ~384.0MB; mergesort scratch needs an extra 24.0MB.
   IComparableArraySort: mean 619~25      ns/item; median 493.6; overhead: 14.8%
      ParallelQuickSort: mean 45.9~3.7    ns/item; median 33.2; overhead: 72.2%
              QuickSort: mean 225~9.2     ns/item; median 180.4; overhead: 32.4%
       TopDownMergeSort: mean 302~12      ns/item; median 235.8; overhead: 26.3%
      BottomUpMergeSort: mean 315~12      ns/item; median 258.8; overhead: 25.4%
     DualPivotQuickSort: mean 253~10      ns/item; median 202.6; overhead: 29.8%
    AltTopDownMergeSort: mean 299~13      ns/item; median 237.5; overhead: 26.5%

Sorting arrays of string with 511394.4 elements by StringOrder (average over 254 benchmarked arrays).
Insertion sorts below 18; faster quicksort median below 2000; no parallelism below 800 items.
type string: total size 56.0 bytes of which value 8.0 and heap size 48.0.  
Per-sort working set on average 28.0MB (max upto twice that), overall benchmark ~448.0MB; mergesort scratch needs an extra 4.0MB.
        StringArraySort: mean 338.2~10    ns/item; median 290.2; overhead: 19.0%
      ParallelQuickSort: mean 61~3.7      ns/item; median 49.9; overhead: 57.6%
              QuickSort: mean 299~9.7     ns/item; median 252.7; overhead: 21.2%
       TopDownMergeSort: mean 298~9.6     ns/item; median 252.4; overhead: 21.6%
      BottomUpMergeSort: mean 342~8.4     ns/item; median 320.6; overhead: 18.1%
     DualPivotQuickSort: mean 304~9.6     ns/item; median 260.9; overhead: 21.0%
    AltTopDownMergeSort: mean 291.5~9.1   ns/item; median 246.9; overhead: 21.8%


Sorting arrays of int with 3132355.8 elements by Int32Ordering (average over 34 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type int: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 16.0MB (max upto twice that), overall benchmark ~256.0MB; mergesort scratch needs an extra 16.0MB.
     PrimitiveArraySort: mean 70.4~4.9    ns/item; median 64.2; overhead: 3.2%
      ParallelQuickSort: mean 11.2~0.86   ns/item; median 10.3; overhead: 17.5%
              QuickSort: mean 60.2~4.2    ns/item; median 55.3; overhead: 3.7%
       TopDownMergeSort: mean 68.2~4.7    ns/item; median 62.0; overhead: 3.2%
      BottomUpMergeSort: mean 68.1~4.6    ns/item; median 62.2; overhead: 3.2%
     DualPivotQuickSort: mean 62.4~4.3    ns/item; median 57.0; overhead: 3.5%
    AltTopDownMergeSort: mean 68.5~4.7    ns/item; median 62.1; overhead: 3.2%

Sorting arrays of int with 3132355.8 elements by ComparableOrdering<int> (average over 34 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type int: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 16.0MB (max upto twice that), overall benchmark ~256.0MB; mergesort scratch needs an extra 16.0MB.
   IComparableArraySort: mean 117~8.1     ns/item; median 107.4; overhead: 3.0%
      ParallelQuickSort: mean 11.4~0.84   ns/item; median 10.6; overhead: 24.2%
              QuickSort: mean 60.6~4.2    ns/item; median 55.6; overhead: 5.5%
       TopDownMergeSort: mean 68.4~4.7    ns/item; median 62.3; overhead: 5.0%
      BottomUpMergeSort: mean 68.4~4.6    ns/item; median 62.4; overhead: 4.9%
     DualPivotQuickSort: mean 66.8~4.6    ns/item; median 60.7; overhead: 5.0%
    AltTopDownMergeSort: mean 69~4.7      ns/item; median 62.4; overhead: 4.9%

Sorting arrays of uint with 3132355.8 elements by UInt32Ordering (average over 34 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type uint: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 16.0MB (max upto twice that), overall benchmark ~256.0MB; mergesort scratch needs an extra 16.0MB.
     PrimitiveArraySort: mean 69.5~4.9    ns/item; median 63.3; overhead: 3.3%
      ParallelQuickSort: mean 11.2~0.86   ns/item; median 10.0; overhead: 17.6%
              QuickSort: mean 60.1~4.1    ns/item; median 55.2; overhead: 3.7%
       TopDownMergeSort: mean 68.3~4.7    ns/item; median 62.2; overhead: 3.2%
      BottomUpMergeSort: mean 68.4~4.6    ns/item; median 62.5; overhead: 3.2%
     DualPivotQuickSort: mean 62.1~4.3    ns/item; median 56.7; overhead: 3.5%
    AltTopDownMergeSort: mean 69~4.7      ns/item; median 62.3; overhead: 3.2%

Sorting arrays of uint with 3132355.8 elements by ComparableOrdering<uint> (average over 34 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type uint: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 16.0MB (max upto twice that), overall benchmark ~256.0MB; mergesort scratch needs an extra 16.0MB.
   IComparableArraySort: mean 121~8.4     ns/item; median 110.7; overhead: 2.9%
      ParallelQuickSort: mean 11.5~0.86   ns/item; median 10.5; overhead: 24.1%
              QuickSort: mean 61.2~4.2    ns/item; median 56.1; overhead: 5.5%
       TopDownMergeSort: mean 69.5~4.8    ns/item; median 63.1; overhead: 4.8%
      BottomUpMergeSort: mean 68.8~4.7    ns/item; median 62.9; overhead: 4.9%
     DualPivotQuickSort: mean 68~4.7      ns/item; median 61.8; overhead: 4.9%
    AltTopDownMergeSort: mean 69.5~4.8    ns/item; median 63.1; overhead: 4.8%

Sorting arrays of ulong with 3132355.8 elements by UInt64Ordering (average over 34 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type ulong: total size 8.0 bytes of which value 8.0 and heap size 0.0.  
Per-sort working set on average 32.0MB (max upto twice that), overall benchmark ~512.0MB; mergesort scratch needs an extra 32.0MB.
     PrimitiveArraySort: mean 69.6~4.9    ns/item; median 63.5; overhead: 4.4%
      ParallelQuickSort: mean 11.3~0.85   ns/item; median 10.2; overhead: 22.2%
              QuickSort: mean 59.9~4.1    ns/item; median 55.2; overhead: 5.0%
       TopDownMergeSort: mean 69.7~4.8    ns/item; median 63.7; overhead: 4.3%
      BottomUpMergeSort: mean 70.8~4.7    ns/item; median 64.8; overhead: 4.2%
     DualPivotQuickSort: mean 60.7~4.2    ns/item; median 55.3; overhead: 4.9%
    AltTopDownMergeSort: mean 70.4~4.8    ns/item; median 63.5; overhead: 4.2%

Sorting arrays of ulong with 3132355.8 elements by ComparableOrdering<ulong> (average over 34 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type ulong: total size 8.0 bytes of which value 8.0 and heap size 0.0.  
Per-sort working set on average 32.0MB (max upto twice that), overall benchmark ~512.0MB; mergesort scratch needs an extra 32.0MB.
   IComparableArraySort: mean 122~8.5     ns/item; median 111.8; overhead: 3.4%
      ParallelQuickSort: mean 11.6~0.84   ns/item; median 10.5; overhead: 26.7%
              QuickSort: mean 61.4~4.2    ns/item; median 56.3; overhead: 6.3%
       TopDownMergeSort: mean 70.7~4.9    ns/item; median 64.1; overhead: 5.5%
      BottomUpMergeSort: mean 71~4.8      ns/item; median 65.1; overhead: 5.5%
     DualPivotQuickSort: mean 68~4.7      ns/item; median 62.1; overhead: 5.8%
    AltTopDownMergeSort: mean 70.7~4.8    ns/item; median 64.1; overhead: 5.5%

Sorting arrays of double with 3132355.8 elements by DoubleOrdering (average over 34 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type double: total size 8.0 bytes of which value 8.0 and heap size 0.0.  
Per-sort working set on average 32.0MB (max upto twice that), overall benchmark ~512.0MB; mergesort scratch needs an extra 32.0MB.
     PrimitiveArraySort: mean 79.8~5.6    ns/item; median 72.8; overhead: 5.5%
      ParallelQuickSort: mean 13~0.94     ns/item; median 11.9; overhead: 26.3%
              QuickSort: mean 69.6~4.8    ns/item; median 64.0; overhead: 6.2%
       TopDownMergeSort: mean 80.1~5.5    ns/item; median 73.1; overhead: 5.4%
      BottomUpMergeSort: mean 81.4~5.4    ns/item; median 74.4; overhead: 5.3%
     DualPivotQuickSort: mean 70.9~4.9    ns/item; median 64.8; overhead: 6.1%
    AltTopDownMergeSort: mean 80.5~5.5    ns/item; median 73.0; overhead: 5.4%

Sorting arrays of double with 3132355.8 elements by ComparableOrdering<double> (average over 34 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type double: total size 8.0 bytes of which value 8.0 and heap size 0.0.  
Per-sort working set on average 32.0MB (max upto twice that), overall benchmark ~512.0MB; mergesort scratch needs an extra 32.0MB.
   IComparableArraySort: mean 204~14      ns/item; median 187.1; overhead: 2.6%
      ParallelQuickSort: mean 22.7~1.6    ns/item; median 20.6; overhead: 19.2%
              QuickSort: mean 125~8.8     ns/item; median 114.5; overhead: 4.1%
       TopDownMergeSort: mean 134~9.4     ns/item; median 120.3; overhead: 3.8%
      BottomUpMergeSort: mean 131~9.1     ns/item; median 121.7; overhead: 3.8%
     DualPivotQuickSort: mean 126~8.8     ns/item; median 115.5; overhead: 4.0%
    AltTopDownMergeSort: mean 130~9       ns/item; median 120.0; overhead: 3.9%

Sorting arrays of float with 3132355.8 elements by FloatOrdering (average over 34 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type float: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 16.0MB (max upto twice that), overall benchmark ~256.0MB; mergesort scratch needs an extra 16.0MB.
     PrimitiveArraySort: mean 78.3~5.5    ns/item; median 71.5; overhead: 4.8%
      ParallelQuickSort: mean 12.7~0.91   ns/item; median 11.6; overhead: 23.7%
              QuickSort: mean 68.9~4.8    ns/item; median 63.3; overhead: 5.4%
       TopDownMergeSort: mean 78.8~5.4    ns/item; median 71.8; overhead: 4.7%
      BottomUpMergeSort: mean 79.2~5.3    ns/item; median 72.5; overhead: 4.7%
     DualPivotQuickSort: mean 70.9~4.9    ns/item; median 64.9; overhead: 5.2%
    AltTopDownMergeSort: mean 79.2~5.4    ns/item; median 71.8; overhead: 4.7%

Sorting arrays of float with 3132355.8 elements by ComparableOrdering<float> (average over 34 benchmarked arrays).
Insertion sorts below 64; faster quicksort median below 13000; no parallelism below 1100 items.
type float: total size 4.0 bytes of which value 4.0 and heap size 0.0.  
Per-sort working set on average 16.0MB (max upto twice that), overall benchmark ~256.0MB; mergesort scratch needs an extra 16.0MB.
   IComparableArraySort: mean 191~13      ns/item; median 174.8; overhead: 2.8%
      ParallelQuickSort: mean 20.8~1.5    ns/item; median 19.2; overhead: 21.1%
              QuickSort: mean 115~8       ns/item; median 105.0; overhead: 4.6%
       TopDownMergeSort: mean 124~8.7     ns/item; median 111.8; overhead: 4.2%
      BottomUpMergeSort: mean 121~8.4     ns/item; median 111.7; overhead: 4.3%
     DualPivotQuickSort: mean 118~8.2     ns/item; median 108.2; overhead: 4.4%
    AltTopDownMergeSort: mean 121~8.4     ns/item; median 111.9; overhead: 4.3%

Sorting arrays of (int, int, int) with 3132355.8 elements by SmallTupleOrder (average over 34 benchmarked arrays).
Insertion sorts below 34; faster quicksort median below 16000; no parallelism below 1000 items.
type (int, int, int): total size 16.0 bytes of which value 16.0 and heap size 0.0.  
Per-sort working set on average 64.0MB (max upto twice that), overall benchmark ~1024.0MB; mergesort scratch needs an extra 64.0MB.
   IComparableArraySort: mean 177~12      ns/item; median 161.3; overhead: 12.6%
      ParallelQuickSort: mean 17.4~1.3    ns/item; median 16.3; overhead: 59.9%
              QuickSort: mean 92.8~6.4    ns/item; median 85.4; overhead: 21.5%
       TopDownMergeSort: mean 104~7.3     ns/item; median 96.7; overhead: 19.7%
      BottomUpMergeSort: mean 108~7.5     ns/item; median 100.5; overhead: 19.1%
     DualPivotQuickSort: mean 96.4~6.6    ns/item; median 87.8; overhead: 20.9%
    AltTopDownMergeSort: mean 106~7       ns/item; median 102.4; overhead: 19.2%

Sorting arrays of SampleClass with 3132355.8 elements by SampleClassOrder (average over 34 benchmarked arrays).
Insertion sorts below 24; faster quicksort median below 10000; no parallelism below 1500 items.
type SampleClass: total size 32.0 bytes of which value 8.0 and heap size 24.0.  
Per-sort working set on average 128.0MB (max upto twice that), overall benchmark ~2048.0MB; mergesort scratch needs an extra 32.0MB.
   IComparableArraySort: mean 250~12      ns/item; median 239.9; overhead: 12.9%
      ParallelQuickSort: mean 33.5~1.1    ns/item; median 33.9; overhead: 45.4%
              QuickSort: mean 142~6.8     ns/item; median 135.7; overhead: 17.3%
       TopDownMergeSort: mean 164~8.6     ns/item; median 156.0; overhead: 15.7%
      BottomUpMergeSort: mean 196~9.9     ns/item; median 186.9; overhead: 13.5%
     DualPivotQuickSort: mean 152~7.4     ns/item; median 145.1; overhead: 16.6%
    AltTopDownMergeSort: mean 162~8.4     ns/item; median 153.4; overhead: 15.8%

Sorting arrays of (int, long, DateTime, string, Guid) with 3132355.8 elements by BigTupleOrder (average over 34 benchmarked arrays).
Insertion sorts below 11; faster quicksort median below 16000; no parallelism below 1000 items.
type (int, long, DateTime, string, Guid): total size 48.0 bytes of which value 48.0 and heap size 0.0.  
Per-sort working set on average 192.0MB (max upto twice that), overall benchmark ~3072.0MB; mergesort scratch needs an extra 192.0MB.
   IComparableArraySort: mean 668~47      ns/item; median 612.5; overhead: 13.6%
      ParallelQuickSort: mean 45.6~3.3    ns/item; median 40.8; overhead: 69.8%
              QuickSort: mean 245~17      ns/item; median 223.2; overhead: 30.0%
       TopDownMergeSort: mean 329~23      ns/item; median 296.8; overhead: 24.1%
      BottomUpMergeSort: mean 347~24      ns/item; median 330.3; overhead: 22.9%
     DualPivotQuickSort: mean 279~19      ns/item; median 252.5; overhead: 27.2%
    AltTopDownMergeSort: mean 324~23      ns/item; median 295.0; overhead: 24.4%

Sorting arrays of string with 3132355.8 elements by StringOrder (average over 34 benchmarked arrays).
Insertion sorts below 18; faster quicksort median below 2000; no parallelism below 800 items.
type string: total size 56.0 bytes of which value 8.0 and heap size 48.0.  
Per-sort working set on average 224.0MB (max upto twice that), overall benchmark ~3584.0MB; mergesort scratch needs an extra 32.0MB.
        StringArraySort: mean 475~23      ns/item; median 456.5; overhead: 16.9%
      ParallelQuickSort: mean 85.2~3.8    ns/item; median 83.4; overhead: 52.7%
              QuickSort: mean 407~20      ns/item; median 385.1; overhead: 19.3%
       TopDownMergeSort: mean 415~20      ns/item; median 398.2; overhead: 18.7%
      BottomUpMergeSort: mean 498~26      ns/item; median 473.4; overhead: 16.4%
     DualPivotQuickSort: mean 421~21      ns/item; median 408.0; overhead: 18.7%
    AltTopDownMergeSort: mean 409~19      ns/item; median 392.8; overhead: 19.0%


int/Int32Ordering using PrimitiveArraySort: 41.6ns/item
int/Int32Ordering using ParallelQuickSort: 14.5ns/item
int/Int32Ordering using QuickSort: 33.7ns/item
int/Int32Ordering using TopDownMergeSort: 37.1ns/item
int/Int32Ordering using BottomUpMergeSort: 37.6ns/item
int/Int32Ordering using DualPivotQuickSort: 34.6ns/item
int/Int32Ordering using AltTopDownMergeSort: 37.2ns/item
int/ComparableOrdering<int> using IComparableArraySort: 67.7ns/item
int/ComparableOrdering<int> using ParallelQuickSort: 14.5ns/item
int/ComparableOrdering<int> using QuickSort: 33.8ns/item
int/ComparableOrdering<int> using TopDownMergeSort: 37.1ns/item
int/ComparableOrdering<int> using BottomUpMergeSort: 37.8ns/item
int/ComparableOrdering<int> using DualPivotQuickSort: 36.3ns/item
int/ComparableOrdering<int> using AltTopDownMergeSort: 37.4ns/item
uint/UInt32Ordering using PrimitiveArraySort: 41.1ns/item
uint/UInt32Ordering using ParallelQuickSort: 14.3ns/item
uint/UInt32Ordering using QuickSort: 33.5ns/item
uint/UInt32Ordering using TopDownMergeSort: 37.0ns/item
uint/UInt32Ordering using BottomUpMergeSort: 37.7ns/item
uint/UInt32Ordering using DualPivotQuickSort: 34.3ns/item
uint/UInt32Ordering using AltTopDownMergeSort: 37.4ns/item
uint/ComparableOrdering<uint> using IComparableArraySort: 69.8ns/item
uint/ComparableOrdering<uint> using ParallelQuickSort: 15.2ns/item
uint/ComparableOrdering<uint> using QuickSort: 34.7ns/item
uint/ComparableOrdering<uint> using TopDownMergeSort: 38.3ns/item
uint/ComparableOrdering<uint> using BottomUpMergeSort: 38.3ns/item
uint/ComparableOrdering<uint> using DualPivotQuickSort: 37.4ns/item
uint/ComparableOrdering<uint> using AltTopDownMergeSort: 38.2ns/item
ulong/UInt64Ordering using PrimitiveArraySort: 41.1ns/item
ulong/UInt64Ordering using ParallelQuickSort: 14.4ns/item
ulong/UInt64Ordering using QuickSort: 33.4ns/item
ulong/UInt64Ordering using TopDownMergeSort: 37.7ns/item
ulong/UInt64Ordering using BottomUpMergeSort: 39.0ns/item
ulong/UInt64Ordering using DualPivotQuickSort: 33.8ns/item
ulong/UInt64Ordering using AltTopDownMergeSort: 38.1ns/item
ulong/ComparableOrdering<ulong> using IComparableArraySort: 70.6ns/item
ulong/ComparableOrdering<ulong> using ParallelQuickSort: 15.0ns/item
ulong/ComparableOrdering<ulong> using QuickSort: 34.5ns/item
ulong/ComparableOrdering<ulong> using TopDownMergeSort: 38.6ns/item
ulong/ComparableOrdering<ulong> using BottomUpMergeSort: 39.5ns/item
ulong/ComparableOrdering<ulong> using DualPivotQuickSort: 37.4ns/item
ulong/ComparableOrdering<ulong> using AltTopDownMergeSort: 38.7ns/item
double/DoubleOrdering using PrimitiveArraySort: 47.7ns/item
double/DoubleOrdering using ParallelQuickSort: 16.7ns/item
double/DoubleOrdering using QuickSort: 38.8ns/item
double/DoubleOrdering using TopDownMergeSort: 43.4ns/item
double/DoubleOrdering using BottomUpMergeSort: 44.6ns/item
double/DoubleOrdering using DualPivotQuickSort: 39.5ns/item
double/DoubleOrdering using AltTopDownMergeSort: 43.9ns/item
double/ComparableOrdering<double> using IComparableArraySort: 116.1ns/item
double/ComparableOrdering<double> using ParallelQuickSort: 31.5ns/item
double/ComparableOrdering<double> using QuickSort: 73.4ns/item
double/ComparableOrdering<double> using TopDownMergeSort: 77.7ns/item
double/ComparableOrdering<double> using BottomUpMergeSort: 74.2ns/item
double/ComparableOrdering<double> using DualPivotQuickSort: 73.9ns/item
double/ComparableOrdering<double> using AltTopDownMergeSort: 74.8ns/item
float/FloatOrdering using PrimitiveArraySort: 46.8ns/item
float/FloatOrdering using ParallelQuickSort: 16.6ns/item
float/FloatOrdering using QuickSort: 38.5ns/item
float/FloatOrdering using TopDownMergeSort: 42.8ns/item
float/FloatOrdering using BottomUpMergeSort: 43.4ns/item
float/FloatOrdering using DualPivotQuickSort: 39.4ns/item
float/FloatOrdering using AltTopDownMergeSort: 43.0ns/item
float/ComparableOrdering<float> using IComparableArraySort: 108.9ns/item
float/ComparableOrdering<float> using ParallelQuickSort: 28.3ns/item
float/ComparableOrdering<float> using QuickSort: 66.5ns/item
float/ComparableOrdering<float> using TopDownMergeSort: 70.9ns/item
float/ComparableOrdering<float> using BottomUpMergeSort: 67.8ns/item
float/ComparableOrdering<float> using DualPivotQuickSort: 67.8ns/item
float/ComparableOrdering<float> using AltTopDownMergeSort: 68.8ns/item
(int, int, int)/SmallTupleOrder using IComparableArraySort: 101.2ns/item
(int, int, int)/SmallTupleOrder using ParallelQuickSort: 22.7ns/item
(int, int, int)/SmallTupleOrder using QuickSort: 52.8ns/item
(int, int, int)/SmallTupleOrder using TopDownMergeSort: 57.8ns/item
(int, int, int)/SmallTupleOrder using BottomUpMergeSort: 60.1ns/item
(int, int, int)/SmallTupleOrder using DualPivotQuickSort: 54.7ns/item
(int, int, int)/SmallTupleOrder using AltTopDownMergeSort: 58.5ns/item
SampleClass/SampleClassOrder using IComparableArraySort: 116.5ns/item
SampleClass/SampleClassOrder using ParallelQuickSort: 29.7ns/item
SampleClass/SampleClassOrder using QuickSort: 68.0ns/item
SampleClass/SampleClassOrder using TopDownMergeSort: 79.4ns/item
SampleClass/SampleClassOrder using BottomUpMergeSort: 87.2ns/item
SampleClass/SampleClassOrder using DualPivotQuickSort: 72.1ns/item
SampleClass/SampleClassOrder using AltTopDownMergeSort: 77.9ns/item
(int, long, DateTime, string, Guid)/BigTupleOrder using IComparableArraySort: 387.1ns/item
(int, long, DateTime, string, Guid)/BigTupleOrder using ParallelQuickSort: 62.6ns/item
(int, long, DateTime, string, Guid)/BigTupleOrder using QuickSort: 145.7ns/item
(int, long, DateTime, string, Guid)/BigTupleOrder using TopDownMergeSort: 188.6ns/item
(int, long, DateTime, string, Guid)/BigTupleOrder using BottomUpMergeSort: 198.0ns/item
(int, long, DateTime, string, Guid)/BigTupleOrder using DualPivotQuickSort: 159.3ns/item
(int, long, DateTime, string, Guid)/BigTupleOrder using AltTopDownMergeSort: 184.8ns/item
string/StringOrder using StringArraySort: 207.2ns/item
string/StringOrder using ParallelQuickSort: 67.8ns/item
string/StringOrder using QuickSort: 185.0ns/item
string/StringOrder using TopDownMergeSort: 183.6ns/item
string/StringOrder using BottomUpMergeSort: 202.9ns/item
string/StringOrder using DualPivotQuickSort: 187.8ns/item
string/StringOrder using AltTopDownMergeSort: 179.5ns/item

int/Int32Ordering: 33.8ns/item
int/ComparableOrdering<int>: 37.8ns/item
uint/UInt32Ordering: 33.6ns/item
uint/ComparableOrdering<uint>: 38.9ns/item
ulong/UInt64Ordering: 33.9ns/item
ulong/ComparableOrdering<ulong>: 39.2ns/item
double/DoubleOrdering: 39.2ns/item
double/ComparableOrdering<double>: 74.5ns/item
float/FloatOrdering: 38.6ns/item
float/ComparableOrdering<float>: 68.4ns/item
(int, int, int)/SmallTupleOrder: 58.3ns/item
SampleClass/SampleClassOrder: 75.8ns/item
(int, long, DateTime, string, Guid)/BigTupleOrder: 189.4ns/item
string/StringOrder: 173.4ns/item

OVERALL: 66.8ns/item
